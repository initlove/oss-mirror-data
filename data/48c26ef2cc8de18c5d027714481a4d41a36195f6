{
  "node_id": "MDM6VGFnNjY1NzMyNDE6NDhjMjZlZjJjYzhkZTE4YzVkMDI3NzE0NDgxYTRkNDFhMzYxOTVmNg==",
  "sha": "48c26ef2cc8de18c5d027714481a4d41a36195f6",
  "url": "https://api.github.com/repos/hyperledger/fabric/git/tags/48c26ef2cc8de18c5d027714481a4d41a36195f6",
  "tagger": {
    "name": "David Enyeart",
    "email": "enyeart@us.ibm.com",
    "date": "2019-07-17T22:04:08Z"
  },
  "object": {
    "sha": "c6cc550cbd21184d24e908c5a4e0d36c1919bf40",
    "type": "commit",
    "url": "https://api.github.com/repos/hyperledger/fabric/git/commits/c6cc550cbd21184d24e908c5a4e0d36c1919bf40"
  },
  "tag": "v1.4.2",
  "message": "v1.4.2 Release Notes - July 17, 2019\n------------------------------------\n\nWhat's New in Hyperledger Fabric v1.4.2\n---------------------------------------\n\nThe following features are included in this release:\n\nFAB-15041 - Kafka to Raft Consensus Migration\nA Kafka-based ordering service can now be migrated to utilize Raft consensus.\nFor details see the documentation at\nhttps://hyperledger-fabric.readthedocs.io/en/latest/kafka_raft_migration.html.\nThis feature requires v1.4.2 'orderer' and 'channel' capabilities to be\nenabled.\n\nFAB-14307 Channel rollback on a peer\nThe new 'peer node rollback' command provides\nadministrative ability to rollback a channel's ledger on a peer to a prior\nblock height in the case a peer's channel data gets into a corrupt state at a\nlater block height. The peer will re-retrieve the rolled back blocks from\nordering service or another peer upon the next peer start. Note that during\nthe rollback, the ledger's private data will be preserved, since it cannot\nbe obtained from ordering service at a later time, and may not be available\nfrom other peers.\nSimilarly, the command 'peer node reset' command can be used to rollback\nall of a peer's channel ledgers to the genesis block of each channel.\nBoth commands must be issued from the peer's CLI while the peer process\nis down.\nIt is recommended to enable v1.4.2 'application' capability to ensure that all\nprivate data is stored on the local peer (including for invalidated transactions),\nin case rollback and reprocessing is required on a peer.\n\nFAB-7559 - Ability to specify orderer endpoints at the organization level\nStarting from version v1.4.2, it is possible and highly recommended to define\norderer endpoints at the organization level (new 'OrdererEndpoints' stanza\nwithin the channel configuration of an organization) and not at the global\n'Orderer.Addresses' section of channel configuration. If at least one\norganization has an ordering service endpoint defined at an organizational\nlevel, all orderers and peers will ignore the channel level endpoints when\nconnecting to ordering nodes.\nUtilizing organization level orderer endpoints is required when using\nservice discovery with orderer nodes provided by multiple organizations,\nso that clients can provide the correct organization TLS certificates.\nThis feature requires v1.4.2 'channel' capability to be\nenabled.\n\nImportant Fixes\n---------------\nFAB-15450 - History database queries do not return all results\nPrior to the fix, history database queries excluded transactions from\nblocks that were multiples of 256 (block 256, 512, 768, etc).\n\nFAB-15411 - GetTransactionByID does not return configuration transactions\nPrior to the fix, GetTransactionByID and GetBlockByTxID did not return\nconfiguration transactions, since these transactions were not indexed\ncorrectly. To fix indexes for pre-existing configuration transactions\non a peer's channel ledgers, stop the peer and delete the index directory,\ne.g. /var/hyperledger/production/ledgersData/chains/index directory.\nThe peer will rebuild the indexes correctly upon the next restart.\n\nFAB-15404 - Orderer Kafka TLS Issue\nPrior to the fix, orderer nodes could not communicate to kafka if\nTLS is enabled.\n\nFAB-15144 - Assorted orderer serviceability fixes\n\nChanges, Known Issues, and Workarounds\n--------------------------------------\nFAB-15031 - ledger.blockstorage_commit_time metric is available on orderer nodes\nledger.blockstorage_commit_time is now available on both peer and orderer nodes,\nbut only includes block storage commit time. A new metric,\nledger_blockstorage_and_pvtdata_commit_time, is available on peer nodes and\nincludes the total commit time for blockstorage and pvtdata.\n\nFAB-15549 - Restrict service discovery endorsement computation\nIf the endorsement policy contains an NoutOf that yields too many combinations\n(such as - 13 out of 25), service discovery will not return all possible\ncombinations to the application (as that number can be huge), but instead will\nreturn a random subset of endorsement combinations.\n\nFAB-12088 - Java chaincode support on s390x architecture\nJava chaincode support is not available on s390x architecture.\n\nFAB-12134 - Same chaincode source receiving fingerprint mismatch error\nChaincode installed in different ways may result in \"chaincode fingerprint\nmismatch data mismatch\" error upon instantiation. This may happen when\ninstalling chaincode by using different SDKs. To workaround the problem,\npackage the chaincode prior to installation and instantiation, by using\nthe \"peer chaincode package\" command.\n\nKnown Vulnerabilities\n---------------------\nFAB-8664 - Peer should detect and react when its org has been removed\nThis is a relatively low severity problem, because it requires a significant\nconspiracy of network admins, but it will be addressed in a future release.\n\nResolved Vulnerabilities\n------------------------\nNone.\n\nDeprecations\n------------\nThe following functions are deprecated and are targeted for removal in a future release.\n\nSupport for automatically vendoring the chaincode shim into user chaincodes.\nThe fabric-ccenv image which is used to build chaincode, currently includes\nthe github.com/hyperledger/fabric/core/chaincode/shim (\"shim\") package.\nThis is convenient, as it provides the ability to package chaincode\nwithout the need to include the \"shim\". However, this may cause issues in future\nreleases (and/or when trying to use packages which are included by the \"shim\").\nIn order to avoid any issues, users are advised to manually vendor the \"shim\"\npackage with their chaincode prior to using the peer CLI for packaging and/or\nfor installing chaincode.\nFor more details see FAB-5177.\n\nSupport for CAR chaincode package format\nSupport for packaging chaincode using the CAR format will be removed in\na future release.\nFor more details see FAB-14720.\n\nSupport for specifying orderer endpoints at the global level in channel configuration.\nUtilize the new 'OrdererEndpoints' stanza within the channel configuration of\nan organization instead.\nFor more details see FAB-7559.\n\nSupport for invoking system chaincodes from user chaincodes.\nSystem chaincodes, for example QSCC, are intended to be invoked by\na client rather than by a user chaincode. Invoking from a user chaincode\nmay cause deadlocks.\nFor more details see FAB-15285.\n\nSupport for user chaincodes to utilize the chaincode shim's logger via NewLogger().\nChaincodes that used the shim's NewLogger() will need to shift to their own preferred\nlogging mechanism.\nFor more details see FAB-15366.\n\nSupport for peer's Admin service.\nThe peer's Admin service exposes APIs such as GetLogSpec() and SetLogSpec().\nInstead of using these services, utilize the HTTP operations service that was\nintroduced in v1.4.0.\nFor more details see FAB-15390.\n\nSupport for Solo ordering service.\nWith the introduction of Raft-based ordering service in v1.4.1, it is possible\nto deploy a single-node (non-production) or multi-node\nRaft-based ordering service with no external dependencies.\nFor single-node (non-production) ordering services, utilize Raft-based ordering\nservice with a single node instead of Solo ordering service.\nFor more details see FAB-15754.\n\nFor the full list of improvements and fixes, refer to the release change log:\nhttps://github.com/hyperledger/fabric/blob/release-1.4/CHANGELOG.md#v142\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
