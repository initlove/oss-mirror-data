{
  "node_id": "MDM6VGFnNjY1NzMyNDE6YjhmNTRlOGQ2NGM2NjMxMWU5YmJmODVhODZiYWIwYTcxNGI0YmMyZg==",
  "sha": "b8f54e8d64c66311e9bbf85a86bab0a714b4bc2f",
  "url": "https://api.github.com/repos/hyperledger/fabric/git/tags/b8f54e8d64c66311e9bbf85a86bab0a714b4bc2f",
  "tagger": {
    "name": "Christopher Ferris",
    "email": "chrisfer@us.ibm.com",
    "date": "2018-07-03T20:48:42Z"
  },
  "object": {
    "sha": "cae2ad4456914adffcb07b1ca873e9624ce8f8b3",
    "type": "commit",
    "url": "https://api.github.com/repos/hyperledger/fabric/git/commits/cae2ad4456914adffcb07b1ca873e9624ce8f8b3"
  },
  "tag": "v1.2.0",
  "message": "v1.2.0 Release Notes - July 3, 2018\n----------------------------------------\n\nWhat's New in v1.2\n------------------\n\nThe following features/epics are included in this release:\n\nFAB-8718 - Channel Private Data\nKeep chaincode data confidential among a subset of channel members.\n\nFAB-8727 - Access control for peer functions\nConfigure which client identities can interact with peer functions, per channel.\n\nFAB-8729 - Pluggable endorsement and validation\nUtilize pluggable endorsement and validation logic per chaincode.\n\nFAB-8779 - Service Discovery\nDiscover network services dynamically, including orderers, peers, chaincode,\nand endorsement policies, to simplify client applications.\n\nHygiene and Technical debt\nGinkgo-based integration tests have been added, and component code has been\nrefactored for improved readability and maintainability.\n\nChanges, Known Issues, and Workarounds\n--------------------------------------\n\nFAB-10151 - configtx.yaml samples fixed\n\nPrevious releases included example input files for configtxgen (configtx.yaml)\nthat contained invalid YAML which referenced YAML anchors before they were\ndefined. It was not a problem in prior releases since the golang YAML parser\ntolerated references before definitions.\nThe configtx.yaml samples are corrected in version v1.2. Users are advised\nto evaluate their configtxgen input documents for places where YAML anchors\nare referenced before they are defined. Either reorder nodes to ensure\nanchors are defined before they are referenced, or re-create YAML documents\nusing the updated configtx.yaml sample documents as a starting point.\nRefer to https://jira.hyperledger.org/browse/FAB-10151 for more details.\n\nFAB-8557 - Transaction index and query behavior changed\n\nThere is a change to how some of the indexes maintained by ledger are updated.\nSpecifically, this includes indexes that maintain information by txid. In the rare\nscenario when two transactions were submitted with the same transaction ids,\nin the previous releases, the last transaction would be indexed. Only the first\ninstance of a transaction can be valid, therefore it was possible for an invalid\ntransaction to overwrite the status of a valid transaction, and therefore APIs\nsuch as 'GetTransactionByID' and 'GetBlockByTxID' may return the latter invalid\ntransaction. In these cases the ledger remained correct, however transaction\nqueries may have returned unexpected results.\nIn this release, the behavior is changed so that the first transaction (the only\ninstance that can be valid) will not be overwritten in the index.\nIn the rare scenario where this problem has occurred on a channel, the peer's\ntransaction index can be rebuilt after upgrading to version v1.2, by stopping the\npeer, deleting the <CORE_PEER_FILESYSTEMPATH>/ledgersData/chains/index directory,\nand restarting the peer. The peer will automatically rebuild its indexes\nusing the new behavior.\nRefer to https://jira.hyperledger.org/browse/FAB-8557 for more details.\n\nFAB-8877 - Reserved field validation for CouchDB state database\n\nPrior releases did not validate chaincode data against all state database\ncontent restrictions.  Specifically, version v1.2 adds validation during\nchaincode execution to ensure that keys that will be written to CouchDB\nstate database are UTF8 complaint, do not start with an underscore, and\nthat there are no top-level JSON fields named '~version' or that start with\nunderscores, as these fields are reserved for use by CouchDB (and Fabric).\nIf these conditions are found during chaincode execution, an error will\nbe returned to the client in the proposal response.\nFor the same reason, all peers on a channel must utilize the same state\ndatabase type, and it is not possible to convert a channel's peers from\nusing LevelDB state database to CouchDB state database, unless the\nchaincode performs the same validations.\nRefer to https://jira.hyperledger.org/browse/FAB-8877 for more details.\n\nKnown Vulnerabilities\n---------------------\nFAB-8664 - Peer does not detect his own org ejection\nThis is a relatively low severity problem, because it requires a significant\nconspiracy of network admins, but it will be addressed in an upcoming release.\n\nResolved Vulnerabilities\n------------------------\nFAB-10537 - Reject CONFIG/ORDERER_TRANSACTION messages\nEnsures that clients cannot submit transactions intended to be generated\nfrom orderer nodes.\n\nOther improvements and fixes\n----------------------------\nFor the full list of improvements and fixes, refer to the release change log:\nhttps://github.com/hyperledger/fabric/blob/master/CHANGELOG.md#v120\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
