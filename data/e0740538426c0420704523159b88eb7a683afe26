{
  "node_id": "MDM6VGFnNjY1NzMyNDE6ZTA3NDA1Mzg0MjZjMDQyMDcwNDUyMzE1OWI4OGViN2E2ODNhZmUyNg==",
  "sha": "e0740538426c0420704523159b88eb7a683afe26",
  "url": "https://api.github.com/repos/hyperledger/fabric/git/tags/e0740538426c0420704523159b88eb7a683afe26",
  "tagger": {
    "name": "David Enyeart",
    "email": "enyeart@us.ibm.com",
    "date": "2019-08-26T22:16:52Z"
  },
  "object": {
    "sha": "b8c4a6aa7da1deac0672e3bc54d429172ace9016",
    "type": "commit",
    "url": "https://api.github.com/repos/hyperledger/fabric/git/commits/b8c4a6aa7da1deac0672e3bc54d429172ace9016"
  },
  "tag": "v1.4.3",
  "message": "v1.4.3 Release Notes - August 26, 2019\n--------------------------------------\n\nWhat's New in Hyperledger Fabric v1.4.3\n---------------------------------------\n\nThe following features are included in this release:\n\nFAB-15388: Node OU certificate support for admin identities.\nFAB-12620: Node OU certificate support for orderer nodes.\n\nNode OUs are now supported for admin and orderer identity\nclassifications (extending the existing Node OU support for clients and peers).\nThese \"organizational units\" allow organizations to further classify identities\ninto admins and orderers based on the OUs specified in their x509 certificates.\nThis feature requires v1.4.3 'channel' capability to be enabled so that all\norderer and peer nodes identify administrators consistently.\nPeers need to be updated to version v1.4.3 before channel administrators\nupdate a channel to v1.4.3 channel capability.\nOrganizations that wish to take advantage of the new capability\nwill need to update their MSP information in the channel configuration.\nFor more details see:\nhttps://hyperledger-fabric.readthedocs.io/en/release-1.4/msp.html#identity-classification\n\nImportant Fixes\n---------------\n\nFAB-16292 Fix nil pointer exception upon gossip peer expiration\n\nThere was an issue introduced in v1.4.2 where peers participating in channels with\ngossip enabled may crash with a nil pointer exception, if another known peer goes down\nfor several minutes (when using default aliveExpirationTimeout peer configuration\nof 25 seconds). To work around the problem on v1.4.2, automatically restart\nthe peer process if it goes down, or configure a large value for aliveExpirationTimeout\n(peer environment variable CORE_PEER_GOSSIP_ALIVEEXPIRATIONTIMEOUT) to completely\navoid the problem until peer can be upgraded to v1.4.3.\n\nFAB-16114 - v1.4.2 private data application capability enablement requires peer restart\n\nPrior to the fix, enablement of the v1.4.2 application capability required\na peer restart to become effective. Since the v1.4.2 application capability\nchanges how peers disseminate private data for invalid transactions, peers\nthat have not been restarted after the application capability has been\nupdated on the channel may not disseminate the data to peers that are\nattempting to pull the private data upon block commit. The pulling peers\nmay therefore get stalled while pulling private data.\nThe remedy on v1.4.2 requires restarting any peer that participates\nin private data dissemination, after v1.4.2 application\ncapability has been enabled on a channel.\nStarting in v1.4.3, the application channel capability becomes effective upon\nprocessing the configuration block update, without requiring a peer restart.\n\nFAB-16327 Fix service discovery with orderer endpoints configured at organization level\n\nv1.4.2 introduced orderer endpoint configuration at the organization level\n('OrdererEndpoints' stanza). Prior to the fix, if orderer endpoints are configured\nonly at the new organization level, and not at the global 'Orderer.Addresses'\nlevel, then service discovery is not able return the channel configuration with the\norderer endpoints.\nWith the v1.4.3 fix, service discovery functions correctly even if orderer endpoints\nare configured only at the organization level.\n\nFAB-16089 Use latest npm version of ccenv image\n\nIn the ccenv image that is used to build node.js chaincode, npm is updated to\nthe latest version. This resolves issues from prior npm versions, such as\nthe ability to include 'prepare' statements in node.js chaincode\npackage.json.\n\nChanges, Known Issues, and Workarounds\n--------------------------------------\nFAB-12088 - Java chaincode support on s390x architecture\nJava chaincode support is not available on s390x architecture.\n\nFAB-12134 - Same chaincode source receiving fingerprint mismatch error\nChaincode installed in different ways may result in \"chaincode fingerprint\nmismatch data mismatch\" error upon instantiation. This may happen when\ninstalling chaincode by using different SDKs. To workaround the problem,\npackage the chaincode prior to installation and instantiation, by using\nthe \"peer chaincode package\" command.\n\nKnown Vulnerabilities\n---------------------\nFAB-8664 - Peer should detect and react when its org has been removed\nThis is a relatively low severity problem, because it requires a significant\nconspiracy of network admins, but it will be addressed in a future release.\n\nResolved Vulnerabilities\n------------------------\nNone.\n\nDeprecations\n------------\nThe following functions are deprecated and are targeted for removal in a future release.\n\nSupport for automatically vendoring the chaincode shim into user chaincodes.\nThe fabric-ccenv image which is used to build chaincode, currently includes\nthe github.com/hyperledger/fabric/core/chaincode/shim (\"shim\") package.\nThis is convenient, as it provides the ability to package chaincode\nwithout the need to include the \"shim\". However, this may cause issues in future\nreleases (and/or when trying to use packages which are included by the \"shim\").\nIn order to avoid any issues, users are advised to manually vendor the \"shim\"\npackage with their chaincode prior to using the peer CLI for packaging and/or\nfor installing chaincode.\nFor more details see FAB-5177.\n\nSupport for CAR chaincode package format\nSupport for packaging chaincode using the CAR format will be removed in\na future release.\nFor more details see FAB-14720.\n\nSupport for specifying orderer endpoints at the global level in channel configuration.\nUtilize the new 'OrdererEndpoints' stanza within the channel configuration of\nan organization instead.\nFor more details see FAB-7559.\n\nSupport for invoking system chaincodes from user chaincodes.\nSystem chaincodes, for example QSCC, are intended to be invoked by\na client rather than by a user chaincode. Invoking from a user chaincode\nmay cause deadlocks.\nFor more details see FAB-15285.\n\nSupport for user chaincodes to utilize the chaincode shim's logger via NewLogger().\nChaincodes that used the shim's NewLogger() will need to shift to their own preferred\nlogging mechanism.\nFor more details see FAB-15366.\n\nSupport for peer's Admin service.\nThe peer's Admin service exposes APIs such as GetLogSpec() and SetLogSpec().\nInstead of using these services, utilize the HTTP operations service that was\nintroduced in v1.4.0.\nFor more details see FAB-15390.\n\nSupport for Solo ordering service.\nWith the introduction of Raft-based ordering service in v1.4.1, it is possible\nto deploy a single-node (non-production) or multi-node\nRaft-based ordering service with no external dependencies.\nFor single-node (non-production) ordering services, utilize Raft-based ordering\nservice with a single node instead of Solo ordering service.\nFor more details see FAB-15754.\n\nFor the full list of improvements and fixes, refer to the release change log:\nhttps://github.com/hyperledger/fabric/blob/release-1.4/CHANGELOG.md#v143\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
