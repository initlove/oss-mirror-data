{
  "node_id": "MDM6VGFnNDU3NjY1NTA6ZmQwZTRjNDU2MWFjMzk0MzNiOTQ1M2Y1NWU0Zjc2M2U2MDg0YTk3Ng==",
  "sha": "fd0e4c4561ac39433b9453f55e4f763e6084a976",
  "url": "https://api.github.com/repos/MagicStack/uvloop/git/tags/fd0e4c4561ac39433b9453f55e4f763e6084a976",
  "tagger": {
    "name": "Yury Selivanov",
    "email": "yury@magic.io",
    "date": "2016-11-10T18:37:13Z"
  },
  "object": {
    "sha": "109fe4baad0012354d6b15613795e019b8d53648",
    "type": "commit",
    "url": "https://api.github.com/repos/MagicStack/uvloop/git/commits/109fe4baad0012354d6b15613795e019b8d53648"
  },
  "tag": "v0.6.1",
  "message": "v0.6.1\n\n- Use `asyncio.isfuture()` directly.\n\n- Use `asyncio._set_running_loop()` and `_get_running_loop()`\n  introduced in Python 3.6. This enables new behaviour of\n  asyncio.get_event_loop().\n\n- Fix `loop.create_server()`, `loop.create_connection()`,\n  `loop.create_datagram_endpoint()`, and\n  `loop.connect_accepted_socket()` to accept only socket\n  kinds they support.  So `create_server()` will raise a\n  ValueError if it receives an `AF_UNIX` socket. This is\n  how asyncio will behave in Python 3.6 and in the next\n  bugfix release of 3.5.\n\n- Fix `loop.create_unix_server()` and\n  `loop.create_unix_connection()` to correctly check for\n  `SOCK_STREAM` on Linux, where socket type is a bit mask.\n\n- Rework the build infrastructure, moving all logic from\n  the Makefile to setup.py.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
