{
  "node_id": "MDM6VGFnNjY1NzMyNDE6MTVlOTIwYWQwNDVlNDRlM2E4Yjc5ZTFjYTRlZjY5Y2FkNzRlYTc2Mg==",
  "sha": "15e920ad045e44e3a8b79e1ca4ef69cad74ea762",
  "url": "https://api.github.com/repos/hyperledger/fabric/git/tags/15e920ad045e44e3a8b79e1ca4ef69cad74ea762",
  "tagger": {
    "name": "David Enyeart",
    "email": "enyeart@us.ibm.com",
    "date": "2019-11-15T13:01:56Z"
  },
  "object": {
    "sha": "7917a40ff6f694b34c971b1f8285de8b1ac39777",
    "type": "commit",
    "url": "https://api.github.com/repos/hyperledger/fabric/git/commits/7917a40ff6f694b34c971b1f8285de8b1ac39777"
  },
  "tag": "v1.4.4",
  "message": "v1.4.4 Release Notes - November 14, 2019\n========================================\n\nWhat's New in Hyperledger Fabric v1.4.4\n---------------------------------------\n\nThe following enhancements are included in this release:\n\n- **FAB-16715, FAB-16544: Orderer endpoint override**\n\n  Ordering networks whose addresses or TLS root certificates change will cause problems for new\n  peers joining channels because the channel genesis block will contain the outdated orderer\n  information. A new configuration option for orderer endpoint overrides allows administrators\n  to configure peers to translate old orderer addresses and certificates to the updated\n  orderer addresses and certificate pools.\n\n- **FAB-17000: Provide notification to users if certs are about to expire**\n\n  Peers and orderers now log a warning to the log a week before the enrollment certificate or\n  TLS certificate expire. Example log entries:\n\n  `[certmonitor] trackCertExpiration -> WARN 011 The server TLS certificate expires within one week`\n\n  `[certmonitor] trackCertExpiration -> WARN 011 The enrollment certificate expires within 2 days and 5 hours`\n\n- **FAB-15814: Add operations endpoint to expose peer/orderer version**\n\n  Adds a /version endpoint to the operations server that serves peer/orderer metadata\n  including Version number and CommitSHA.\n\n- **FAB-16852** Bump to Go v1.12.12 and baseimage 0.4.18\n\n- **FABB-128** Bump node.js to 8.16.1 and npm to 6.11.3 in 0.4.18 baseimage\n\nFixes\n-----\n\n- **FAB-13552: Re-addition of a removed OSN in a channel** - Prior to the fix, if a Raft orderer was\n  removed from the consenter set in the channel configuration, it would not check to see if was added\n  back and a reboot was required.\n\n- **FAB-15026: Segmentation violation in peer chaincode install** -  Prior to the fix, the tar processing\n  during chaincode package install could trigger a panic while looking up user info when run with\n  certain versions of libc. The calls to libc are no longer made.\n\n- **FAB-15389: Endorsing peer is not honoring maxPeerCount for private data dissemination** - Prior\n  to the fix, there was a chance that peers chosen for private data dissemination at endorsement time\n  could potentially be counted twice towards maxPeerCount, leading to disseminating private data to\n  fewer peers than expected.\n\n- **FAB-15666: NetworkMode does not get passed to chaincode image build**\n  Prior to the fix, the peer's configured docker NetworkMode was not getting passed\n  upon chaincode image build.\n\n- **FAB-16571: Fix panic in peer chaincode package command** - Prior to the fix, the peer\n  chaincode package command could panic when traversing the chaincode location.\n\n- **FAB-16610: Commit block to ledger hang when chaincode crash** - Prior to the fix, if a chaincode\n  terminated abnormally during an invocation, a lock would prevent blocks from committing until the\n  execution timeout (core.chaincode.executetimeout property) was triggered. The fix ensures that the\n  lock is released immediately on exit.\n\n- **FAB-16643: Nil pointer during reconciliation of deleted private data** - Prior to the fix,\n  if a peer is trying to reconcile missing private data, and the private data key has since been\n  deleted, the peer will panic with a nil pointer exception.\n\n- **FAB-16651: Fix connection leak if certificates renewed** - Prior to the fix, peers that have changed\n  their enrollment certificate without changing their endpoint caused connections to leak over time.\n\n- **FAB-16695: Separate listeners causes panic** - Prior to the fix, configuring separate\n  listeners for the peer admin service or for the orderer cluster service would cause a\n  panic on startup if Prometheus metrics were enabled.\n\n- **FAB-16948: Nil pointer exception in CID GetID() when using Idemix** - GetID now returns an error\n  when invoked on a chaincode request from an Idemix identity.\n\nChanges, Known Issues, and Workarounds\n--------------------------------------\n\n- **FAB-12134: Same chaincode source receiving fingerprint mismatch error** -\n  Chaincode installed in different ways may result in \"chaincode fingerprint\n  mismatch data mismatch\" error upon instantiation. This may happen when\n  installing chaincode by using different SDKs. To workaround the problem,\n  package the chaincode prior to installation and instantiation, by using\n  the \"peer chaincode package\" command.\n\nKnown Vulnerabilities\n---------------------\n\n- **FAB-8664: Peer should detect and react when its org has been removed**\n  This is a relatively low severity problem, because it requires a significant\n  conspiracy of network admins, but it will be addressed in a future release.\n\nResolved Vulnerabilities\n------------------------\nNone.\n\nDeprecations\n------------\nThe following functions are deprecated and are targeted for removal in a future release.\n\n- Support for automatically vendoring the chaincode shim into user chaincodes.\n  The fabric-ccenv image which is used to build chaincode, currently includes\n  the github.com/hyperledger/fabric/core/chaincode/shim (\"shim\") package.\n  This is convenient, as it provides the ability to package chaincode\n  without the need to include the \"shim\". However, this may cause issues in future\n  releases (and/or when trying to use packages which are included by the \"shim\").\n  In order to avoid any issues, users are advised to manually vendor the \"shim\"\n  package with their chaincode prior to using the peer CLI for packaging and/or\n  for installing chaincode.\n  For more details see FAB-5177.\n\n- Support for CAR chaincode package format\n  Support for packaging chaincode using the CAR format will be removed in\n  a future release.\n  For more details see FAB-14720.\n\n- Support for specifying orderer endpoints at the global level in channel configuration.\n  Utilize the new 'OrdererEndpoints' stanza within the channel configuration of\n  an organization instead.\n  For more details see FAB-7559.\n\n- Support for invoking system chaincodes from user chaincodes.\n  System chaincodes, for example QSCC, are intended to be invoked by\n  a client rather than by a user chaincode. Invoking from a user chaincode\n  may cause deadlocks.\n  For more details see FAB-15285.\n\n- Support for user chaincodes to utilize the chaincode shim's logger via NewLogger().\n  Chaincodes that used the shim's NewLogger() will need to shift to their own preferred\n  logging mechanism.\n  For more details see FAB-15366.\n\n- Support for peer's Admin service.\n  The peer's Admin service exposes APIs such as GetLogSpec() and SetLogSpec().\n  Instead of using these services, utilize the HTTP operations service that was\n  introduced in v1.4.0.\n  For more details see FAB-15390.\n\n- Support for Solo ordering service.\n  With the introduction of Raft-based ordering service in v1.4.1, it is possible\n  to deploy a single-node (non-production) or multi-node\n  Raft-based ordering service with no external dependencies.\n  For single-node (non-production) ordering services, utilize Raft-based ordering\n  service with a single node instead of Solo ordering service.\n  For more details see FAB-15754.\n\nChange log\n----------\nFor the full list of changes, refer to the release change log:\nhttps://github.com/hyperledger/fabric/blob/release-1.4/CHANGELOG.md#v144\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
