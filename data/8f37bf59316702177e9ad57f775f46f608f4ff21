{
  "node_id": "MDM6VGFnNjY1NzMyNDE6OGYzN2JmNTkzMTY3MDIxNzdlOWFkNTdmNzc1ZjQ2ZjYwOGY0ZmYyMQ==",
  "sha": "8f37bf59316702177e9ad57f775f46f608f4ff21",
  "url": "https://api.github.com/repos/hyperledger/fabric/git/tags/8f37bf59316702177e9ad57f775f46f608f4ff21",
  "tagger": {
    "name": "David Enyeart",
    "email": "enyeart@us.ibm.com",
    "date": "2018-12-20T19:05:38Z"
  },
  "object": {
    "sha": "b87ec8086e8bf65ca8a6bdde4001247413da93ce",
    "type": "commit",
    "url": "https://api.github.com/repos/hyperledger/fabric/git/commits/b87ec8086e8bf65ca8a6bdde4001247413da93ce"
  },
  "tag": "v1.4.0-rc2",
  "message": "v1.4.0-rc2 Release Notes - December 20, 2018\n--------------------------------------------\n\nWhat's New in Hyperledger Fabric v1.4\n-------------------------------------\n\nThe following features are included in this release:\n\nFabric operations service\nA new HTTP based \"operations\" endpoint has been implemented on the orderer and\nthe peer. The endpoint exposes APIs to check the server's health, to query\nand modify the logging level of the process, and, when configured, to expose\nFabric metrics.\n\nFAB-3388 - Operational metrics for Fabric components\nThe peer and orderer have been instrumented to provide basic operational\nmetrics. The metrics can be surfaced for consumption by Prometheus or StatsD.\n\nFAB-10851 - Health check endpoint\nThe orderer and the peer now provide a mechanism to check the health of the\nprocess via an HTTP request. Requests to GET /healthz on the operations\nendpoint will complete with a status 200 OK when the server believes it is\nhealthy. When a health check fails, the server will respond with a 503 Service\nUnavailable and a JSON payload indicating which component detected an issue.\nThe types of health checks that are performed will be extended over time.\n\nFAB-12265 - Dynamic log levels\nThe orderer and the peer now provide a mechanism to get and update the active\nlogging specification of the server. Requests to GET /logspec on the\noperations endpoint will return with a JSON payload that contains the active\nspec. When a JSON payload of `{\"spec\":\"the-log-spec\"}` is sent as the body of\na PUT /logspec request, the active logging spec will be updated.\n\nFAB-12357 - Updates to logging\nIn earlier versions of Fabric, loggers were associated with named components\nand configuration would control the active level of each logger. While this\nmodel works in theory, because of the configuration management libraries used\nby Fabric and the structure of the Fabric code base, in practice it had a\nnumber of issues.\nWith 1.4, we're changing the model slightly. Instead of associating loggers\nwith components, we are naming loggers and to help avoid side effects during\ninitialization, the logging configuration is no longer obtained from the\nfabric configuration system but from environment variables that define\nthe logging specification and log format.\nThe log specification is a single string that consists of colon separated\ntokens. Each token declares one or more logger name prefixes (separated by\ncommas) and an optional log level. When the logger name prefix ends with a\nperiod, it indicates that the log level should only apply to the logger with\nthat exact name without the trailing period. When the logger name pattern is\nomitted, it specifies the default log level. In cases where multiple entries\nreference the same name pattern or multiple instances of a default are\nprovided, the last specification takes precedence.\n\nFAB-12363 - Logging for gRPC interactions\nThe orderer and the peer now provide logging (INFO level) for each gRPC\ninteraction completed.\n\nFAB-12372 - Obtain Go routine stacks without termination\nWhen SIGUSR1 is received by the peer or the orderer, the state of all go\nroutines will be captured and logged at the INFO level. This collection\nactivity will not terminate the process.\n\nFAB-5093 - Private data reconciliation\nAllows peers for organizations that are added to private data collections\nto retrieve the private data for prior transactions to which they now are\nentitled. This feature is only supported on peers that have joined\na channel since v1.4.\n\nFAB-11409 - Private data client access control\nAbility to automatically enforce access control within chaincode based\non the client organization collection membership without having to\nwrite specific chaincode logic. This feature is configured by using\nthe collection configuration property memberOnlyRead:true. If you have\na mixed network of v1.4 peers and prior release peers, the prior\nrelease peers will not honor this configuration until they are upgraded\nto v1.4.\n\nChanges, Known Issues, and Workarounds\n--------------------------------------\n\nFAB-12357 - Updates to logging\nInstead of using logging.level and CORE_LOGGING_LEVEL to control the logging\nlevel for the peer, and General.LogLevel or ORDERER_GENERAL_LOGLEVEL to\ncontrol logging at the orderer, both processes now use the FABRIC_LOGGING_SPEC\nenvironment variable to acquire the initial logging specification for the\nserver. Existing logging configuration should be converted to the new model.\n\nFAB-12489 - peer logging command updates\nThe `getlevel`, `setlevel`, and `revertlevels` subcommands of the `peer\nlogging` command are deprecated and users should migrate to the operations\nserver.\nThe behavior of `setlevel` has also changed slightly. The previous\nimplementation would treat the `logger` argument as a regular expression and\napply the new log level to all loggers that matched the expression. The\nupdated implementation treats the `logger` argument as a logger name and\nappends it to the active logging spec at the indicated level.\n\nFAB-12088 - Java chaincode support on s390 architecture\nJava chaincode support is not yet available on s390 architecture.\n\nFAB-12134 Same chaincode source receiving fingerprint mismatch error\nChaincode installed in different ways may result in \"chaincode fingerprint\nmismatch data mismatch\" error upon instantiation.  This may happen when\ninstalling chaincode by using different SDKs. To workaround the problem,\npackage the chaincode prior to installation and instantiation, by using\nthe \"peer chaincode package\" command.\n\nKnown Vulnerabilities\n---------------------\nFAB-8664 - Peer should detect and react when its org has been removed\nThis is a relatively low severity problem, because it requires a significant\nconspiracy of network admins, but it will be addressed in a future release.\n\nResolved Vulnerabilities\n------------------------\nNone.\n\nOther improvements and fixes\n----------------------------\nUpdated to Go version 1.11.1\nUpdated baseimage version to 0.4.14\n\nFor the full list of improvements and fixes, refer to the release change log:\nhttps://github.com/hyperledger/fabric/blob/master/CHANGELOG.md#v140-rc2\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
