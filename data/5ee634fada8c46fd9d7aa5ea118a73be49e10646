{
  "node_id": "MDM6VGFnMTAzNjQzMjAyOjVlZTYzNGZhZGE4YzQ2ZmQ5ZDdhYTVlYTExOGE3M2JlNDllMTA2NDY=",
  "sha": "5ee634fada8c46fd9d7aa5ea118a73be49e10646",
  "url": "https://api.github.com/repos/LINBIT/drbd/git/tags/5ee634fada8c46fd9d7aa5ea118a73be49e10646",
  "tagger": {
    "name": "Philipp Reisner",
    "email": "philipp.reisner@linbit.com",
    "date": "2017-08-31T12:31:40Z"
  },
  "object": {
    "sha": "f7b979e7af01813e031aac579140237640c94569",
    "type": "commit",
    "url": "https://api.github.com/repos/LINBIT/drbd/git/commits/f7b979e7af01813e031aac579140237640c94569"
  },
  "tag": "drbd-9.0.9",
  "message": "9.0.9-1 (api:genl2/proto:86-112/transport:14)\n--------\n * fix occasionally forgotten resyncs in installations where\n   diskless primaries are present. The bug tigers when a storage\n   node is re-integrated, and it happens to connect to the diskless\n   primary first; This bug is severe, since it might cause inconsistent\n   data read back on the diskless primary!\n * fix an issue that causes unexpected split-brain situations upon\n   connect. This issue triggers only when one of the node has a\n   node_id bigger than 3\n * in a cluster with a diskless primary, when a server goes away,\n   and is not outdated, outdate it upon reconnect. This gets done\n   when it's current UUID does not match the diskless primaries\n   exposed data UUID; with this bug present it can lead to\n   inconsistent data presented on the diskless primary node to\n   readers\n * fix update of exposed data UUID on diskless primaries. It could\n   lead to false reject of further diskfull secondaries that\n   want to join\n * fix a possible OOPS when in a debug message regarding bitmap\n   locking\n * fix discard bigger than 1MiB; The bug causes disconnect with\n   bigger discard requests\n * fix left over bits in bitmap on SyncSource after resync; the\n   issue was triggered by write requests that come in while the\n   resync starts\n * fix peers becoming unexpectedly displayed as D_OUTDATED at the\n   end of a resync; While the disk state on the node stays D_UP_TO_DATE\n * fix a race between auto promote and auto demote of multiple volumes\n   in a single resource; The symptom was that the a process opening\n   the /dev/drbdX for read-write gets an -EROFS errno\n * Speed up down of many resources by using call_rcu() instead\n   of synchronize_rcu()\n * Make it compatible with the soon to be released 4.13 kernel\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niD8DBQBZqAG6absdXACqiTMRAlyxAJwMgRkH0aQb4ff6fXd6mXjuQWhasgCgsBZL\nLEUUQbR/mhxMy6qW4/Kn+Gs=\n=/HIU\n-----END PGP SIGNATURE-----\n",
  "verification": {
    "verified": false,
    "reason": "unknown_key",
    "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niD8DBQBZqAG6absdXACqiTMRAlyxAJwMgRkH0aQb4ff6fXd6mXjuQWhasgCgsBZL\nLEUUQbR/mhxMy6qW4/Kn+Gs=\n=/HIU\n-----END PGP SIGNATURE-----\n",
    "payload": "object f7b979e7af01813e031aac579140237640c94569\ntype commit\ntag drbd-9.0.9\ntagger Philipp Reisner <philipp.reisner@linbit.com> 1504182700 +0200\n\n9.0.9-1 (api:genl2/proto:86-112/transport:14)\n--------\n * fix occasionally forgotten resyncs in installations where\n   diskless primaries are present. The bug tigers when a storage\n   node is re-integrated, and it happens to connect to the diskless\n   primary first; This bug is severe, since it might cause inconsistent\n   data read back on the diskless primary!\n * fix an issue that causes unexpected split-brain situations upon\n   connect. This issue triggers only when one of the node has a\n   node_id bigger than 3\n * in a cluster with a diskless primary, when a server goes away,\n   and is not outdated, outdate it upon reconnect. This gets done\n   when it's current UUID does not match the diskless primaries\n   exposed data UUID; with this bug present it can lead to\n   inconsistent data presented on the diskless primary node to\n   readers\n * fix update of exposed data UUID on diskless primaries. It could\n   lead to false reject of further diskfull secondaries that\n   want to join\n * fix a possible OOPS when in a debug message regarding bitmap\n   locking\n * fix discard bigger than 1MiB; The bug causes disconnect with\n   bigger discard requests\n * fix left over bits in bitmap on SyncSource after resync; the\n   issue was triggered by write requests that come in while the\n   resync starts\n * fix peers becoming unexpectedly displayed as D_OUTDATED at the\n   end of a resync; While the disk state on the node stays D_UP_TO_DATE\n * fix a race between auto promote and auto demote of multiple volumes\n   in a single resource; The symptom was that the a process opening\n   the /dev/drbdX for read-write gets an -EROFS errno\n * Speed up down of many resources by using call_rcu() instead\n   of synchronize_rcu()\n * Make it compatible with the soon to be released 4.13 kernel\n"
  }
}
