{
  "node_id": "MDM6VGFnMzAxNzQyOmM3MGQxZDE3OGEyOWIyZTJkN2ZiZTQ3OWFmZDMwMzAwYmE3ODkzMWI=",
  "sha": "c70d1d178a29b2e2d7fbe479afd30300ba78931b",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/c70d1d178a29b2e2d7fbe479afd30300ba78931b",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2019-03-01T15:12:57Z"
  },
  "object": {
    "sha": "3c8728d8d0eb28fa43aa91073be222b04d799bde",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/3c8728d8d0eb28fa43aa91073be222b04d799bde"
  },
  "tag": "v6.0.0",
  "message": "What's new in Tornado 6.0\n\nMar 1, 2019\n-----------\n\nBackwards-incompatible changes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- Python 2.7 and 3.4 are no longer supported; the minimum supported\n  Python version is 3.5.2.\n- APIs deprecated in Tornado 5.1 have been removed. This includes the\n  ``tornado.stack_context`` module and most ``callback`` arguments\n  throughout the package. All removed APIs emitted\n  `DeprecationWarning` when used in Tornado 5.1, so running your\n  application with the ``-Wd`` Python command-line flag or the\n  environment variable ``PYTHONWARNINGS=d`` should tell you whether\n  your application is ready to move to Tornado 6.0.\n- ``.WebSocketHandler.get`` is now a coroutine and must be called\n  accordingly in any subclasses that override this method (but note\n  that overriding ``get`` is not recommended; either ``prepare`` or\n  ``open`` should be used instead).\n\nGeneral changes\n~~~~~~~~~~~~~~~\n\n- Tornado now includes type annotations compatible with ``mypy``.\n  These annotations will be used when type-checking your application\n  with ``mypy``, and may be usable in editors and other tools.\n- Tornado now uses native coroutines internally, improving performance.\n\n`tornado.auth`\n~~~~~~~~~~~~~~\n\n- All ``callback`` arguments in this package have been removed. Use\n  the coroutine interfaces instead.\n- The ``OAuthMixin._oauth_get_user`` method has been removed.\n  Override `~.OAuthMixin._oauth_get_user_future` instead.\n\n`tornado.concurrent`\n~~~~~~~~~~~~~~~~~~~~\n\n- The ``callback`` argument to `.run_on_executor` has been removed.\n- ``return_future`` has been removed.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n- Some older portions of this module have been removed. This includes\n  ``engine``, ``YieldPoint``, ``Callback``, ``Wait``, ``WaitAll``,\n  ``MultiYieldPoint``, and ``Task``.\n- Functions decorated with ``@gen.coroutine`` no longer accept\n  ``callback`` arguments.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n- The behavior of ``raise_error=False`` has changed. Now only\n  suppresses the errors raised due to completed responses with non-200\n  status codes (previously it suppressed all errors).\n- The ``callback`` argument to `.AsyncHTTPClient.fetch` has been removed.\n\n`tornado.httputil`\n~~~~~~~~~~~~~~~~~~\n\n- ``HTTPServerRequest.write`` has been removed. Use the methods of\n  ``request.connection`` instead.\n- Unrecognized ``Content-Encoding`` values now log warnings only for\n  content types that we would otherwise attempt to parse.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n- ``IOLoop.set_blocking_signal_threshold``,\n  ``IOLoop.set_blocking_log_threshold``, ``IOLoop.log_stack``,\n  and ``IOLoop.handle_callback_exception`` have been removed.\n- Improved performance of `.IOLoop.add_callback`.\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n- All ``callback`` arguments in this module have been removed except\n  for `.BaseIOStream.set_close_callback`.\n- ``streaming_callback`` arguments to `.BaseIOStream.read_bytes` and\n  `.BaseIOStream.read_until_close` have been removed.\n- Eliminated unnecessary logging of \"Errno 0\".\n\n`tornado.log`\n~~~~~~~~~~~~~\n\n- Log files opened by this module are now explicitly set to UTF-8 encoding.\n\n`tornado.netutil`\n~~~~~~~~~~~~~~~~~\n\n- The results of ``getaddrinfo`` are now sorted by address family to\n  avoid partial failures and deadlocks.\n\n`tornado.platform.twisted`\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- ``TornadoReactor`` and ``TwistedIOLoop`` have been removed.\n\n``tornado.simple_httpclient``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- The default HTTP client now supports the ``network_interface``\n  request argument to specify the source IP for the connection.\n- If a server returns a 3xx response code without a ``Location``\n  header, the response is raised or returned directly instead of\n  trying and failing to follow the redirect.\n- When following redirects, methods other than ``POST`` will no longer\n  be transformed into ``GET`` requests. 301 (permanent) redirects are\n  now treated the same way as 302 (temporary) and 303 (see other)\n  redirects in this respect.\n- Following redirects now works with ``body_producer``.\n\n``tornado.stack_context``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- The ``tornado.stack_context`` module has been removed.\n\n`tornado.tcpserver`\n~~~~~~~~~~~~~~~~~~~\n\n- `.TCPServer.start` now supports a ``max_restarts`` argument (same as\n  `.fork_processes`).\n\n`tornado.testing`\n~~~~~~~~~~~~~~~~~\n\n- `.AsyncHTTPTestCase` now drops all references to the `.Application`\n  during ``tearDown``, allowing its memory to be reclaimed sooner.\n- `.AsyncTestCase` now cancels all pending coroutines in ``tearDown``,\n  in an effort to reduce warnings from the python runtime about\n  coroutines that were not awaited. Note that this may cause\n  ``asyncio.CancelledError`` to be logged in other places. Coroutines\n  that expect to be running at test shutdown may need to catch this\n  exception.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n- The ``asynchronous`` decorator has been removed.\n- The ``callback`` argument to `.RequestHandler.flush` has been removed.\n- `.StaticFileHandler` now supports large negative values for the\n  ``Range`` header and returns an appropriate error for ``end >\n  start``.\n- It is now possible to set ``expires_days`` in ``xsrf_cookie_kwargs``.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n- Pings and other messages sent while the connection is closing are\n  now silently dropped instead of logging exceptions.\n- Errors raised by ``open()`` are now caught correctly when this method\n  is a coroutine.\n\n`tornado.wsgi`\n~~~~~~~~~~~~~~\n\n- ``WSGIApplication`` and ``WSGIAdapter`` have been removed.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
