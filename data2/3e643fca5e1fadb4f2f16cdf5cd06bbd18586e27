{
  "node_id": "MDM6VGFnMzAxNzQyOjNlNjQzZmNhNWUxZmFkYjRmMmYxNmNkZjVjZDA2YmJkMTg1ODZlMjc=",
  "sha": "3e643fca5e1fadb4f2f16cdf5cd06bbd18586e27",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/3e643fca5e1fadb4f2f16cdf5cd06bbd18586e27",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2015-02-07T17:52:45Z"
  },
  "object": {
    "sha": "a30dcd09e4dcba9f41d13b3432a9f424c49de6a2",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/a30dcd09e4dcba9f41d13b3432a9f424c49de6a2"
  },
  "tag": "v4.1.0",
  "message": "What's new in Tornado 4.1\n=========================\n\nFeb 7, 2015\n-----------\n\nHighlights\n~~~~~~~~~~\n\n* If a `.Future` contains an exception but that exception is never\n  examined or re-raised (e.g. by yielding the `.Future`), a stack\n  trace will be logged when the `.Future` is garbage-collected.\n* New class `tornado.gen.WaitIterator` provides a way to iterate\n  over ``Futures`` in the order they resolve.\n* The `tornado.websocket` module now supports compression via the\n  \"permessage-deflate\" extension.  Override\n  `.WebSocketHandler.get_compression_options` to enable on the server\n  side, and use the ``compression_options`` keyword argument to\n  `.websocket_connect` on the client side.\n* When the appropriate packages are installed, it is possible to yield\n  `asyncio.Future` or Twisted ``Defered`` objects in Tornado coroutines.\n\nBackwards-compatibility notes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* `.HTTPServer` now calls ``start_request`` with the correct\n  arguments.  This change is backwards-incompatible, afffecting any\n  application which implemented `.HTTPServerConnectionDelegate` by\n  following the example of `.Application` instead of the documented\n  method signatures.\n\n`tornado.concurrent`\n~~~~~~~~~~~~~~~~~~~~\n\n* If a `.Future` contains an exception but that exception is never\n  examined or re-raised (e.g. by yielding the `.Future`), a stack\n  trace will be logged when the `.Future` is garbage-collected.\n* `.Future` now catches and logs exceptions in its callbacks.\n\n``tornado.curl_httpclient``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``tornado.curl_httpclient`` now supports request bodies for ``PATCH``\n  and custom methods.\n* ``tornado.curl_httpclient`` now supports resubmitting bodies after\n  following redirects for methods other than ``POST``.\n* ``curl_httpclient`` now runs the streaming and header callbacks on\n  the IOLoop.\n* ``tornado.curl_httpclient`` now uses its own logger for debug output\n  so it can be filtered more easily.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n* New class `tornado.gen.WaitIterator` provides a way to iterate\n  over ``Futures`` in the order they resolve.\n* When the `~functools.singledispatch` library is available (standard on\n  Python 3.4, available via ``pip install singledispatch`` on older versions),\n  the `.convert_yielded` function can be used to make other kinds of objects\n  yieldable in coroutines.\n* New function `tornado.gen.sleep` is a coroutine-friendly\n  analogue to `time.sleep`.\n* `.gen.engine` now correctly captures the stack context for its callbacks.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n* `tornado.httpclient.HTTPRequest` accepts a new argument\n  ``raise_error=False`` to suppress the default behavior of raising an\n  error for non-200 response codes.\n\n`tornado.httpserver`\n~~~~~~~~~~~~~~~~~~~~\n\n* `.HTTPServer` now calls ``start_request`` with the correct\n  arguments.  This change is backwards-incompatible, afffecting any\n  application which implemented `.HTTPServerConnectionDelegate` by\n  following the example of `.Application` instead of the documented\n  method signatures.\n* `.HTTPServer` now tolerates extra newlines which are sometimes inserted\n  between requests on keep-alive connections.\n* `.HTTPServer` can now use keep-alive connections after a request\n  with a chunked body.\n* `.HTTPServer` now always reports ``HTTP/1.1`` instead of echoing\n  the request version.\n\n`tornado.httputil`\n~~~~~~~~~~~~~~~~~~\n\n* New function `tornado.httputil.split_host_and_port` for parsing\n  the ``netloc`` portion of URLs.\n* The ``context`` argument to `.HTTPServerRequest` is now optional,\n  and if a context is supplied the ``remote_ip`` attribute is also optional.\n* `.HTTPServerRequest.body` is now always a byte string (previously the default\n  empty body would be a unicode string on python 3).\n* Header parsing now works correctly when newline-like unicode characters\n  are present.\n* Header parsing again supports both CRLF and bare LF line separators.\n* Malformed ``multipart/form-data`` bodies will always be logged\n  quietly instead of raising an unhandled exception; previously\n  the behavior was inconsistent depending on the exact error.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n* The ``kqueue`` and ``select`` IOLoop implementations now report\n  writeability correctly, fixing flow control in IOStream.\n* When a new `.IOLoop` is created, it automatically becomes \"current\"\n  for the thread if there is not already a current instance.\n* New method `.PeriodicCallback.is_running` can be used to see\n  whether the `.PeriodicCallback` has been started.\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n* `.IOStream.start_tls` now uses the ``server_hostname`` parameter\n  for certificate validation.\n* `.SSLIOStream` will no longer consume 100% CPU after certain error conditions.\n* `.SSLIOStream` no longer logs ``EBADF`` errors during the handshake as they\n  can result from nmap scans in certain modes.\n\n`tornado.options`\n~~~~~~~~~~~~~~~~~\n\n* `~tornado.options.parse_config_file` now always decodes the config\n  file as utf8 on Python 3.\n* `tornado.options.define` more accurately finds the module defining the\n  option.\n\n``tornado.platform.asyncio``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* It is now possible to yield ``asyncio.Future`` objects in coroutines\n  when the `~functools.singledispatch` library is available and\n  ``tornado.platform.asyncio`` has been imported.\n* New methods `tornado.platform.asyncio.to_tornado_future` and\n  `~tornado.platform.asyncio.to_asyncio_future` convert between\n  the two libraries' `.Future` classes.\n\n``tornado.platform.twisted``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* It is now possible to yield ``Deferred`` objects in coroutines\n  when the `~functools.singledispatch` library is available and\n  ``tornado.platform.twisted`` has been imported.\n\n`tornado.tcpclient`\n~~~~~~~~~~~~~~~~~~~\n\n* `.TCPClient` will no longer raise an exception due to an ill-timed\n  timeout.\n\n`tornado.tcpserver`\n~~~~~~~~~~~~~~~~~~~\n\n* `.TCPServer` no longer ignores its ``read_chunk_size`` argument.\n\n`tornado.testing`\n~~~~~~~~~~~~~~~~~\n\n* `.AsyncTestCase` has better support for multiple exceptions. Previously\n  it would silently swallow all but the last; now it raises the first\n  and logs all the rest.\n* `.AsyncTestCase` now cleans up `.Subprocess` state on ``tearDown`` when\n  necessary.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n* The `.asynchronous` decorator now understands `concurrent.futures.Future`\n  in addition to `tornado.concurrent.Future`.\n* `.StaticFileHandler` no longer logs a stack trace if the connection is\n  closed while sending the file.\n* `.RequestHandler.send_error` now supports a ``reason`` keyword\n  argument, similar to `tornado.web.HTTPError`.\n* `.RequestHandler.locale` now has a property setter.\n* `.Application.add_handlers` hostname matching now works correctly with\n  IPv6 literals.\n* Redirects for the `.Application` ``default_host`` setting now match\n  the request protocol instead of redirecting HTTPS to HTTP.\n* Malformed ``_xsrf`` cookies are now ignored instead of causing\n  uncaught exceptions.\n* ``Application.start_request`` now has the same signature as\n  `.HTTPServerConnectionDelegate.start_request`.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n* The `tornado.websocket` module now supports compression via the\n  \"permessage-deflate\" extension.  Override\n  `.WebSocketHandler.get_compression_options` to enable on the server\n  side, and use the ``compression_options`` keyword argument to\n  `.websocket_connect` on the client side.\n* `.WebSocketHandler` no longer logs stack traces when the connection\n  is closed.\n* `.WebSocketHandler.open` now accepts ``*args, **kw`` for consistency\n  with ``RequestHandler.get`` and related methods.\n* The ``Sec-WebSocket-Version`` header now includes all supported versions.\n* `.websocket_connect` now has a ``on_message_callback`` keyword argument\n  for callback-style use without ``read_message()``.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
