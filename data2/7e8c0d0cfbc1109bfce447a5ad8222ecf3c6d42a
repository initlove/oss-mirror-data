{
  "node_id": "MDM6VGFnMzAxNzQyOjdlOGMwZDBjZmJjMTEwOWJmY2U0NDdhNWFkODIyMmVjZjNjNmQ0MmE=",
  "sha": "7e8c0d0cfbc1109bfce447a5ad8222ecf3c6d42a",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/7e8c0d0cfbc1109bfce447a5ad8222ecf3c6d42a",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2018-07-11T13:26:40Z"
  },
  "object": {
    "sha": "c890f840f28b668202682acae6fefb633e6e6fb2",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/c890f840f28b668202682acae6fefb633e6e6fb2"
  },
  "tag": "v5.1.0",
  "message": "What's new in Tornado 5.1\n\nJuly 12, 2018\n-------------\n\nDeprecation notice\n~~~~~~~~~~~~~~~~~~\n\n- Tornado 6.0 will drop support for Python 2.7 and 3.4. The minimum\n  supported Python version will be 3.5.2.\n- The `tornado.stack_context` module is deprecated and will be removed\n  in Tornado 6.0. The reason for this is that it is not feasible to\n  provide this module's semantics in the presence of ``async def``\n  native coroutines. `.ExceptionStackContext` is mainly obsolete\n  thanks to coroutines. `.StackContext` lacks a direct replacement\n  although the new ``contextvars`` package (in the Python standard\n  library beginning in Python 3.7) may be an alternative.\n- Callback-oriented code often relies on `.ExceptionStackContext` to\n  handle errors and prevent leaked connections. In order to avoid the\n  risk of silently introducing subtle leaks (and to consolidate all of\n  Tornado's interfaces behind the coroutine pattern), ``callback``\n  arguments throughout the package are deprecated and will be removed\n  in version 6.0. All functions that had a ``callback`` argument\n  removed now return a `.Future` which should be used instead.\n- Where possible, deprecation warnings are emitted when any of these\n  deprecated interfaces is used. However, Python does not display\n  deprecation warnings by default. To prepare your application for\n  Tornado 6.0, run Python with the ``-Wd`` argument or set the\n  environment variable ``PYTHONWARNINGS`` to ``d``. If your\n  application runs on Python 3 without deprecation warnings, it should\n  be able to move to Tornado 6.0 without disruption.\n\n`tornado.auth`\n~~~~~~~~~~~~~~\n\n- `.OAuthMixin._oauth_get_user_future` may now be a native coroutine.\n- All ``callback`` arguments in this package are deprecated and will\n  be removed in 6.0. Use the coroutine interfaces instead.\n- The ``OAuthMixin._oauth_get_user`` method is deprecated and will be removed in\n  6.0. Override `~.OAuthMixin._oauth_get_user_future` instead.\n\n`tornado.autoreload`\n~~~~~~~~~~~~~~~~~~~~\n\n- The command-line autoreload wrapper is now preserved if an internal\n  autoreload fires.\n- The command-line wrapper no longer starts duplicated processes on windows\n  when combined with internal autoreload.\n\n`tornado.concurrent`\n~~~~~~~~~~~~~~~~~~~~\n\n- `.run_on_executor` now returns `.Future` objects that are compatible\n  with ``await``.\n- The ``callback`` argument to `.run_on_executor` is deprecated and will\n  be removed in 6.0.\n- `.return_future` is deprecated and will be removed in 6.0.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n- Some older portions of this module are deprecated and will be removed\n  in 6.0. This includes `.engine`, `.YieldPoint`, `.Callback`,\n  `.Wait`, `.WaitAll`, `.MultiYieldPoint`, and `.Task`.\n- Functions decorated with ``@gen.coroutine`` will no longer accept\n  ``callback`` arguments in 6.0.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n- The behavior of ``raise_error=False`` is changing in 6.0. Currently\n  it suppresses all errors; in 6.0 it will only suppress the errors\n  raised due to completed responses with non-200 status codes.\n- The ``callback`` argument to `.AsyncHTTPClient.fetch` is deprecated\n  and will be removed in 6.0.\n- `tornado.httpclient.HTTPError` has been renamed to\n  `.HTTPClientError` to avoid ambiguity in code that also has to deal\n  with `tornado.web.HTTPError`. The old name remains as an alias.\n- ``tornado.curl_httpclient`` now supports non-ASCII characters in\n  username and password arguments.\n- ``.HTTPResponse.request_time`` now behaves consistently across\n  ``simple_httpclient`` and ``curl_httpclient``, excluding time spent\n  in the ``max_clients`` queue in both cases (previously this time was\n  included in ``simple_httpclient`` but excluded in\n  ``curl_httpclient``). In both cases the time is now computed using\n  a monotonic clock where available.\n- `.HTTPResponse` now has a ``start_time`` attribute recording a\n  wall-clock (`time.time`) timestamp at which the request started\n  (after leaving the ``max_clients`` queue if applicable).\n\n`tornado.httputil`\n~~~~~~~~~~~~~~~~~~\n\n- `.parse_multipart_form_data` now recognizes non-ASCII filenames in\n  RFC 2231/5987 (``filename*=``) format.\n- `.HTTPServerRequest.write` is deprecated and will be removed in 6.0. Use\n  the methods of ``request.connection`` instead.\n- Malformed HTTP headers are now logged less noisily.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n- `.PeriodicCallback` now supports a ``jitter`` argument to randomly\n  vary the timeout.\n- `.IOLoop.set_blocking_signal_threshold`,\n  `~.IOLoop.set_blocking_log_threshold`, `~.IOLoop.log_stack`,\n  and `.IOLoop.handle_callback_exception` are deprecated and will\n  be removed in 6.0.\n- Fixed a `KeyError` in `.IOLoop.close` when `.IOLoop` objects are\n  being opened and closed in multiple threads.\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n- All ``callback`` arguments in this module are deprecated except for\n  `.BaseIOStream.set_close_callback`. They will be removed in 6.0.\n- ``streaming_callback`` arguments to `.BaseIOStream.read_bytes` and\n  `.BaseIOStream.read_until_close` are deprecated and will be removed\n  in 6.0.\n\n`tornado.netutil`\n~~~~~~~~~~~~~~~~~\n\n- Improved compatibility with GNU Hurd.\n\n`tornado.options`\n~~~~~~~~~~~~~~~~~\n\n- `tornado.options.parse_config_file` now allows setting options to\n  strings (which will be parsed the same way as\n  `tornado.options.parse_command_line`) in addition to the specified\n  type for the option.\n\n`tornado.platform.twisted`\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- `.TornadoReactor` and `.TwistedIOLoop` are deprecated and will be\n  removed in 6.0. Instead, Tornado will always use the asyncio event loop\n  and twisted can be configured to do so as well.\n\n`tornado.stack_context`\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- The `tornado.stack_context` module is deprecated and will be removed\n  in 6.0.\n\n`tornado.testing`\n~~~~~~~~~~~~~~~~~\n\n- `.AsyncHTTPTestCase.fetch` now takes a ``raise_error`` argument.\n  This argument has the same semantics as `.AsyncHTTPClient.fetch`,\n  but defaults to false because tests often need to deal with non-200\n  responses (and for backwards-compatibility).\n- The `.AsyncTestCase.stop` and `.AsyncTestCase.wait` methods are\n  deprecated.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n- New method `.RequestHandler.detach` can be used from methods\n  that are not decorated with ``@asynchronous`` (the decorator\n  was required to use ``self.request.connection.detach()``.\n- `.RequestHandler.finish` and `.RequestHandler.render` now return\n  ``Futures`` that can be used to wait for the last part of the\n  response to be sent to the client.\n- `.FallbackHandler` now calls ``on_finish`` for the benefit of\n  subclasses that may have overridden it.\n- The `.asynchronous` decorator is deprecated and will be removed in 6.0.\n- The ``callback`` argument to `.RequestHandler.flush` is deprecated\n  and will be removed in 6.0.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n- When compression is enabled, memory limits now apply to the\n  post-decompression size of the data, protecting against DoS attacks.\n- `.websocket_connect` now supports subprotocols.\n- `.WebSocketHandler` and `.WebSocketClientConnection` now have\n  ``selected_subprotocol`` attributes to see the subprotocol in use.\n- The `.WebSocketHandler.select_subprotocol` method is now called with\n  an empty list instead of a list containing an empty string if no\n  subprotocols were requested by the client.\n- `.WebSocketHandler.open` may now be a coroutine.\n- The ``data`` argument to `.WebSocketHandler.ping` is now optional.\n- Client-side websocket connections no longer buffer more than one\n  message in memory at a time.\n- Exception logging now uses `.RequestHandler.log_exception`.\n\n`tornado.wsgi`\n~~~~~~~~~~~~~~\n\n- `.WSGIApplication` and `.WSGIAdapter` are deprecated and will be removed\n  in Tornado 6.0.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
