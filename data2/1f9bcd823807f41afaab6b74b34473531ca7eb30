{
  "node_id": "MDM6VGFnMzAxNzQyOjFmOWJjZDgyMzgwN2Y0MWFmYWFiNmI3NGIzNDQ3MzUzMWNhN2ViMzA=",
  "sha": "1f9bcd823807f41afaab6b74b34473531ca7eb30",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/1f9bcd823807f41afaab6b74b34473531ca7eb30",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2013-03-29T13:02:20Z"
  },
  "object": {
    "sha": "6c6b72f3a38771792717857c914b976a1a5187cb",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/6c6b72f3a38771792717857c914b976a1a5187cb"
  },
  "tag": "v3.0.0",
  "message": "What's new in Tornado 3.0\n=========================\n\nMar 29, 2013\n------------\n\nHighlights\n^^^^^^^^^^\n\n* The ``callback`` argument to many asynchronous methods is now\n  optional, and these methods return a `.Future`.  The `tornado.gen`\n  module now understands ``Futures``, and these methods can be used\n  directly without a `.gen.Task` wrapper.\n* New function `.IOLoop.current` returns the `.IOLoop` that is running\n  on the current thread (as opposed to `.IOLoop.instance`, which\n  returns a specific thread's (usually the main thread's) IOLoop.\n* New class `tornado.netutil.Resolver` provides an asynchronous\n  interface to DNS resolution.  The default implementation is still\n  blocking, but non-blocking implementations are available using one\n  of three optional dependencies: `~tornado.netutil.ThreadedResolver`\n  using the `concurrent.futures` thread pool,\n  ``tornado.platform.caresresolver.CaresResolver`` using the ``pycares``\n  library, or ``tornado.platform.twisted.TwistedResolver`` using ``twisted``\n* Tornado's logging is now less noisy, and it no longer goes directly\n  to the root logger, allowing for finer-grained configuration.\n* New class `tornado.process.Subprocess` wraps `subprocess.Popen` with\n  `.PipeIOStream` access to the child's file descriptors.\n* `.IOLoop` now has a static `configure <.Configurable.configure>`\n  method like the one on `.AsyncHTTPClient`, which can be used to\n  select an `.IOLoop` implementation other than the default.\n* `.IOLoop` can now optionally use a monotonic clock if available\n  (see below for more details).\n\nBackwards-incompatible changes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Python 2.5 is no longer supported.  Python 3 is now supported in a single\n  codebase instead of using ``2to3``\n* The ``tornado.database`` module has been removed.  It is now available\n  as a separate package, `torndb <https://github.com/bdarnell/torndb>`_\n* Functions that take an ``io_loop`` parameter now default to\n  `.IOLoop.current()` instead of `.IOLoop.instance()`.\n* Empty HTTP request arguments are no longer ignored.  This applies to\n  ``HTTPRequest.arguments`` and ``RequestHandler.get_argument[s]``\n  in WSGI and non-WSGI modes.\n* On Python 3, `tornado.escape.json_encode` no longer accepts byte strings.\n* On Python 3, the ``get_authenticated_user`` methods in `tornado.auth`\n  now return character strings instead of byte strings.\n* ``tornado.netutil.TCPServer`` has moved to its own module,\n  `tornado.tcpserver`.\n* The Tornado test suite now requires ``unittest2`` when run on Python 2.6.\n\nDetailed changes by module\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMultiple modules\n~~~~~~~~~~~~~~~~\n\n* Tornado no longer logs to the root logger.  Details on the new logging\n  scheme can be found under the `tornado.log` module.  Note that in some\n  cases this will require that you add an explicit logging configuration\n  in order to see any output (perhaps just calling ``logging.basicConfig()``),\n  although both `.IOLoop.start()` and `tornado.options.parse_command_line`\n  will do this for you.\n* On python 3.2+, methods that take an ``ssl_options`` argument (on\n  `.SSLIOStream`, `.TCPServer`, and `.HTTPServer`) now accept either a\n  dictionary of options or an `ssl.SSLContext` object.\n* New optional dependency on `concurrent.futures` to provide better support\n  for working with threads.  `concurrent.futures` is in the standard library\n  for Python 3.2+, and can be installed on older versions with\n  ``pip install futures``.\n\n`tornado.autoreload`\n~~~~~~~~~~~~~~~~~~~~\n\n* `tornado.autoreload` is now more reliable when there are errors at import\n  time.\n* Calling `tornado.autoreload.start` (or creating an `.Application` with\n  ``debug=True``) twice on the same `.IOLoop` now does nothing (instead of\n  creating multiple periodic callbacks).  Starting autoreload on\n  more than one `.IOLoop` in the same process now logs a warning.\n* Scripts run by autoreload no longer inherit ``__future__`` imports\n  used by Tornado.\n\n`tornado.auth`\n~~~~~~~~~~~~~~\n\n* On Python 3, the ``get_authenticated_user`` method family now returns\n  character strings instead of byte strings.\n* Asynchronous methods defined in `tornado.auth` now return a\n  `.Future`, and their ``callback`` argument is optional.  The\n  ``Future`` interface is preferred as it offers better error handling\n  (the previous interface just logged a warning and returned None).\n* The `tornado.auth` mixin classes now define a method\n  ``get_auth_http_client``, which can be overridden to use a non-default\n  `.AsyncHTTPClient` instance (e.g. to use a different `.IOLoop`)\n* Subclasses of `.OAuthMixin` are encouraged to override\n  `.OAuthMixin._oauth_get_user_future` instead of ``_oauth_get_user``,\n  although both methods are still supported.\n\n`tornado.concurrent`\n~~~~~~~~~~~~~~~~~~~~\n\n* New module `tornado.concurrent` contains code to support working with\n  `concurrent.futures`, or to emulate future-based interface when that module\n  is not available.\n\n``tornado.curl_httpclient``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Preliminary support for ``tornado.curl_httpclient`` on Python 3.  The latest\n  official release of pycurl only supports Python 2, but Ubuntu has a\n  port available in 12.10 (``apt-get install python3-pycurl``).  This port\n  currently has bugs that prevent it from handling arbitrary binary data\n  but it should work for textual (utf8) resources.\n* Fix a crash with libcurl 7.29.0 if a curl object is created and closed\n  without being used.\n\n`tornado.escape`\n~~~~~~~~~~~~~~~~\n\n* On Python 3, `~tornado.escape.json_encode` no longer accepts byte strings.\n  This mirrors the behavior of the underlying json module.  Python 2 behavior\n  is unchanged but should be faster.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n* New decorator ``@gen.coroutine`` is available as an alternative to\n  ``@gen.engine``.  It automatically returns a\n  `.Future`, and within the function instead of\n  calling a callback you return a value with ``raise\n  gen.Return(value)`` (or simply ``return value`` in Python 3.3).\n* Generators may now yield `.Future` objects.\n* Callbacks produced by `.gen.Callback` and `.gen.Task` are now automatically\n  stack-context-wrapped, to minimize the risk of context leaks when used\n  with asynchronous functions that don't do their own wrapping.\n* Fixed a memory leak involving generators, `.RequestHandler.flush`,\n  and clients closing connections while output is being written.\n* Yielding a large list no longer has quadratic performance.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n* `.AsyncHTTPClient.fetch` now returns a `.Future` and its callback argument\n  is optional.  When the future interface is used, any error will be raised\n  automatically, as if `.HTTPResponse.rethrow` was called.\n* `.AsyncHTTPClient.configure` and all `.AsyncHTTPClient` constructors\n  now take a ``defaults`` keyword argument.  This argument should be a\n  dictionary, and its values will be used in place of corresponding\n  attributes of `~tornado.httpclient.HTTPRequest` that are not set.\n* All unset attributes of `tornado.httpclient.HTTPRequest` are now\n  ``None``.  The default values of some attributes\n  (``connect_timeout``, ``request_timeout``, ``follow_redirects``,\n  ``max_redirects``, ``use_gzip``, ``proxy_password``,\n  ``allow_nonstandard_methods``, and ``validate_cert`` have been moved\n  from `~tornado.httpclient.HTTPRequest` to the client\n  implementations.\n* The ``max_clients`` argument to `.AsyncHTTPClient` is now a keyword-only\n  argument.\n* Keyword arguments to `.AsyncHTTPClient.configure` are no longer used\n  when instantiating an implementation subclass directly.\n* Secondary `.AsyncHTTPClient` callbacks (``streaming_callback``,\n  ``header_callback``, and ``prepare_curl_callback``) now respect\n  `.StackContext`.\n\n`tornado.httpserver`\n~~~~~~~~~~~~~~~~~~~~\n\n* `.HTTPServer` no longer logs an error when it is unable to read a second\n  request from an HTTP 1.1 keep-alive connection.\n* `.HTTPServer` now takes a ``protocol`` keyword argument which can be set\n  to ``https`` if the server is behind an SSL-decoding proxy that does not\n  set any supported X-headers.\n* `tornado.httpserver.HTTPConnection` now has a ``set_close_callback``\n  method that should be used instead of reaching into its ``stream``\n  attribute.\n* Empty HTTP request arguments are no longer ignored.  This applies to\n  ``HTTPRequest.arguments`` and ``RequestHandler.get_argument[s]``\n  in WSGI and non-WSGI modes.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n* New function `.IOLoop.current` returns the ``IOLoop`` that is running\n  on the current thread (as opposed to `.IOLoop.instance`, which returns a\n  specific thread's (usually the main thread's) IOLoop).\n* New method `.IOLoop.add_future` to run a callback on the IOLoop when\n  an asynchronous `.Future` finishes.\n* `.IOLoop` now has a static `configure <.Configurable.configure>`\n  method like the one on `.AsyncHTTPClient`, which can be used to\n  select an `.IOLoop` implementation other than the default.\n* The `.IOLoop` poller implementations (``select``, ``epoll``, ``kqueue``)\n  are now available as distinct subclasses of `.IOLoop`.  Instantiating\n  `.IOLoop` will continue to automatically choose the best available\n  implementation.\n* The `.IOLoop` constructor has a new keyword argument ``time_func``,\n  which can be used to set the time function used when scheduling callbacks.\n  This is most useful with the `time.monotonic` function, introduced\n  in Python 3.3 and backported to older versions via the ``monotime``\n  module.  Using a monotonic clock here avoids problems when the system\n  clock is changed.\n* New function `.IOLoop.time` returns the current time according to the\n  IOLoop.  To use the new monotonic clock functionality, all calls to\n  `.IOLoop.add_timeout` must be either pass a `datetime.timedelta` or\n  a time relative to `.IOLoop.time`, not `time.time`.  (`time.time` will\n  continue to work only as long as the IOLoop's ``time_func`` argument\n  is not used).\n* New convenience method `.IOLoop.run_sync` can be used to start an IOLoop\n  just long enough to run a single coroutine.\n* New method `.IOLoop.add_callback_from_signal` is safe to use in a signal\n  handler (the regular `.add_callback` method may deadlock).\n* `.IOLoop` now uses `signal.set_wakeup_fd` where available (Python 2.6+\n  on Unix) to avoid a race condition that could result in Python signal\n  handlers being delayed.\n* Method ``IOLoop.running()`` has been removed.\n* `.IOLoop` has been refactored to better support subclassing.\n* `.IOLoop.add_callback` and `.add_callback_from_signal` now take\n  ``*args, **kwargs`` to pass along to the callback.\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n* `.IOStream.connect` now has an optional ``server_hostname`` argument\n  which will be used for SSL certificate validation when applicable.\n  Additionally, when supported (on Python 3.2+), this hostname\n  will be sent via SNI (and this is supported by ``tornado.simple_httpclient``)\n* Much of `.IOStream` has been refactored into a separate class\n  `.BaseIOStream`.\n* New class `tornado.iostream.PipeIOStream` provides the IOStream\n  interface on pipe file descriptors.\n* `.IOStream` now raises a new exception\n  ``tornado.iostream.StreamClosedError`` when you attempt to read or\n  write after the stream has been closed (by either side).\n* `.IOStream` now simply closes the connection when it gets an\n  ``ECONNRESET`` error, rather than logging it as an error.\n* ``IOStream.error`` no longer picks up unrelated exceptions.\n* `.BaseIOStream.close` now has an ``exc_info`` argument (similar to the\n  one used in the `logging` module) that can be used to set the stream's\n  ``error`` attribute when closing it.\n* `.BaseIOStream.read_until_close` now works correctly when it is called\n  while there is buffered data.\n* Fixed a major performance regression when run on PyPy (introduced in\n  Tornado 2.3).\n\n`tornado.log`\n~~~~~~~~~~~~~\n\n* New module containing `.enable_pretty_logging` and `.LogFormatter`,\n  moved from the options module.\n* `.LogFormatter` now handles non-ascii data in messages and tracebacks better.\n\n`tornado.netutil`\n~~~~~~~~~~~~~~~~~\n\n* New class `tornado.netutil.Resolver` provides an asynchronous\n  interface to DNS resolution.  The default implementation is still\n  blocking, but non-blocking implementations are available using one\n  of three optional dependencies: `~tornado.netutil.ThreadedResolver`\n  using the `concurrent.futures` thread pool,\n  `tornado.platform.caresresolver.CaresResolver` using the ``pycares``\n  library, or `tornado.platform.twisted.TwistedResolver` using ``twisted``\n* New function `tornado.netutil.is_valid_ip` returns true if a given string\n  is a valid IP (v4 or v6) address.\n* `tornado.netutil.bind_sockets` has a new ``flags`` argument that can\n  be used to pass additional flags to ``getaddrinfo``.\n* `tornado.netutil.bind_sockets` no longer sets ``AI_ADDRCONFIG``; this will\n  cause it to bind to both ipv4 and ipv6 more often than before.\n* `tornado.netutil.bind_sockets` now works when Python was compiled\n  with ``--disable-ipv6`` but IPv6 DNS resolution is available on the\n  system.\n* ``tornado.netutil.TCPServer`` has moved to its own module, `tornado.tcpserver`.\n\n`tornado.options`\n~~~~~~~~~~~~~~~~~\n\n* The class underlying the functions in `tornado.options` is now public\n  (`tornado.options.OptionParser`).  This can be used to create multiple\n  independent option sets, such as for subcommands.\n* `tornado.options.parse_config_file` now configures logging automatically\n  by default, in the same way that `~tornado.options.parse_command_line` does.\n* New function `tornado.options.add_parse_callback` schedules a callback\n  to be run after the command line or config file has been parsed.  The\n  keyword argument ``final=False`` can be used on either parsing function\n  to supress these callbacks.\n* `tornado.options.define` now takes a ``callback`` argument.  This callback\n  will be run with the new value whenever the option is changed.  This is\n  especially useful for options that set other options, such as by reading\n  from a config file.\n* `tornado.options.parse_command_line` ``--help`` output now goes to ``stderr``\n  rather than ``stdout``.\n* `tornado.options.options` is no longer a subclass of `dict`; attribute-style\n  access is now required.\n* `tornado.options.options` (and `.OptionParser` instances generally) now\n  have a `.mockable()` method that returns a wrapper object compatible with\n  `mock.patch <unittest.mock.patch>`.\n* Function ``tornado.options.enable_pretty_logging`` has been moved to the\n  `tornado.log` module.\n\n`tornado.platform.caresresolver`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* New module containing an asynchronous implementation of the `.Resolver`\n  interface, using the ``pycares`` library.\n\n`tornado.platform.twisted`\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* New class `tornado.platform.twisted.TwistedIOLoop` allows Tornado\n  code to be run on the Twisted reactor (as opposed to the existing\n  `.TornadoReactor`, which bridges the gap in the other direction).\n* New class `tornado.platform.twisted.TwistedResolver` is an asynchronous\n  implementation of the `.Resolver` interface.\n\n`tornado.process`\n~~~~~~~~~~~~~~~~~\n\n* New class `tornado.process.Subprocess` wraps `subprocess.Popen` with\n  `.PipeIOStream` access to the child's file descriptors.\n\n``tornado.simple_httpclient``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``SimpleAsyncHTTPClient`` now takes a ``resolver`` keyword argument\n  (which may be passed to either the constructor or `configure\n  <.Configurable.configure>`), to allow it to use the new non-blocking\n  `tornado.netutil.Resolver`.\n* When following redirects, ``SimpleAsyncHTTPClient`` now treats a 302\n  response code the same as a 303.  This is contrary to the HTTP spec\n  but consistent with all browsers and other major HTTP clients\n  (including ``CurlAsyncHTTPClient``).\n* The behavior of ``header_callback`` with ``SimpleAsyncHTTPClient`` has\n  changed and is now the same as that of ``CurlAsyncHTTPClient``.  The\n  header callback now receives the first line of the response (e.g.\n  ``HTTP/1.0 200 OK``) and the final empty line.\n* ``tornado.simple_httpclient`` now accepts responses with a 304\n  status code that include a ``Content-Length`` header.\n* Fixed a bug in which ``SimpleAsyncHTTPClient`` callbacks were being run in the\n  client's ``stack_context``.\n\n`tornado.stack_context`\n~~~~~~~~~~~~~~~~~~~~~~~\n\n* `.stack_context.wrap` now runs the wrapped callback in a more consistent\n  environment by recreating contexts even if they already exist on the\n  stack.\n* Fixed a bug in which stack contexts could leak from one callback\n  chain to another.\n* Yield statements inside a ``with`` statement can cause stack\n  contexts to become inconsistent; an exception will now be raised\n  when this case is detected.\n\n`tornado.template`\n~~~~~~~~~~~~~~~~~~\n\n* Errors while rendering templates no longer log the generated code,\n  since the enhanced stack traces (from version 2.1) should make this\n  unnecessary.\n* The ``{% apply %}`` directive now works properly with functions that return\n  both unicode strings and byte strings (previously only byte strings were\n  supported).\n* Code in templates is no longer affected by Tornado's ``__future__`` imports\n  (which previously included ``absolute_import`` and ``division``).\n\n`tornado.testing`\n~~~~~~~~~~~~~~~~~\n\n* New function `tornado.testing.bind_unused_port` both chooses a port\n  and binds a socket to it, so there is no risk of another process\n  using the same port.  ``get_unused_port`` is now deprecated.\n* New decorator `tornado.testing.gen_test` can be used to allow for\n  yielding `tornado.gen` objects in tests, as an alternative to the\n  ``stop`` and ``wait`` methods of `.AsyncTestCase`.\n* `tornado.testing.AsyncTestCase` and friends now extend ``unittest2.TestCase``\n  when it is available (and continue to use the standard ``unittest`` module\n  when ``unittest2`` is not available)\n* `tornado.testing.ExpectLog` can be used as a finer-grained alternative\n  to `tornado.testing.LogTrapTestCase`\n* The command-line interface to `tornado.testing.main` now supports\n  additional arguments from the underlying `unittest` module:\n  ``verbose``, ``quiet``, ``failfast``, ``catch``, ``buffer``.\n* The deprecated ``--autoreload`` option of `tornado.testing.main` has\n  been removed.  Use ``python -m tornado.autoreload`` as a prefix command\n  instead.\n* The ``--httpclient`` option of `tornado.testing.main` has been moved\n  to ``tornado.test.runtests`` so as not to pollute the application\n  option namespace.  The `tornado.options` module's new callback\n  support now makes it easy to add options from a wrapper script\n  instead of putting all possible options in `tornado.testing.main`.\n* `.AsyncHTTPTestCase` no longer calls `.AsyncHTTPClient.close` for tests\n  that use the singleton `.IOLoop.instance`.\n* `.LogTrapTestCase` no longer fails when run in unknown logging\n  configurations.  This allows tests to be run under nose, which does its\n  own log buffering (`.LogTrapTestCase` doesn't do anything useful in this\n  case, but at least it doesn't break things any more).\n\n``tornado.util``\n~~~~~~~~~~~~~~~~\n\n* ``tornado.util.b`` (which was only intended for internal use) is gone.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n* `.RequestHandler.set_header` now overwrites previous header values\n  case-insensitively.\n* `tornado.web.RequestHandler` has new attributes ``path_args`` and\n  ``path_kwargs``, which contain the positional and keyword arguments\n  that are passed to the ``get``/``post``/etc method.  These attributes\n  are set before those methods are called, so they are available during\n  ``prepare()``\n* `tornado.web.ErrorHandler` no longer requires XSRF tokens on ``POST``\n  requests, so posts to an unknown url will always return 404 instead of\n  complaining about XSRF tokens.\n* Several methods related to HTTP status codes now take a ``reason`` keyword\n  argument to specify an alternate \"reason\" string (i.e. the \"Not Found\" in\n  \"HTTP/1.1 404 Not Found\").  It is now possible to set status codes other\n  than those defined in the spec, as long as a reason string is given.\n* The ``Date`` HTTP header is now set by default on all responses.\n* ``Etag``/``If-None-Match`` requests now work with `.StaticFileHandler`.\n* `.StaticFileHandler` no longer sets ``Cache-Control: public`` unnecessarily.\n* When gzip is enabled in a `tornado.web.Application`, appropriate\n  ``Vary: Accept-Encoding`` headers are now sent.\n* It is no longer necessary to pass all handlers for a host in a single\n  `.Application.add_handlers` call.  Now the request will be matched\n  against the handlers for any ``host_pattern`` that includes the request's\n  ``Host`` header.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n* Client-side WebSocket support is now available:\n  `tornado.websocket.websocket_connect`\n* `.WebSocketHandler` has new methods `~.WebSocketHandler.ping` and\n  `~.WebSocketHandler.on_pong` to send pings to the browser (not\n  supported on the ``draft76`` protocol)\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
