{
  "node_id": "MDM6VGFnNzY2ODQ2MDE6Y2ViYjdiMzJiZWU3MTZjOGJkNzlhZWZjN2RkODk1Y2I2Yjk4YmU2Yg==",
  "sha": "cebb7b32bee716c8bd79aefc7dd895cb6b98be6b",
  "url": "https://api.github.com/repos/opencontainers/go-digest/git/tags/cebb7b32bee716c8bd79aefc7dd895cb6b98be6b",
  "tagger": {
    "name": "Stephen J Day",
    "email": "stephen.day@docker.com",
    "date": "2017-01-31T21:48:17Z"
  },
  "object": {
    "sha": "aa2ec055abd10d26d539eb630a92241b781ce4bc",
    "type": "commit",
    "url": "https://api.github.com/repos/opencontainers/go-digest/git/commits/aa2ec055abd10d26d539eb630a92241b781ce4bc"
  },
  "tag": "v1.0.0-rc0",
  "message": "Open Containers Go Digest 1.0.0-rc0\n\nThis the first official release candidate of the go-digest package, the common\ndigest package used across the container ecosystem.\n\nWhat is a digest? A digest is just a hash.\n\nThe most common use case for a digest is to create a content\nidentifier for use in [Content Addressable Storage](https://en.wikipedia.org/wiki/Content-addressable_storage)\nsystems:\n\n```go\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\nIn the example above, the id can be used to uniquely identify\nthe byte slice \"my content\". This allows two disparate applications\nto agree on a verifiable identifier without having to trust one\nanother.\n\nAn identifying digest can be verified, as follows:\n\n```go\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\nA `Verifier` type can be used to handle cases where an `io.Reader`\nmakes more sense:\n\n```go\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\nUsing [Merkle DAGs](https://en.wikipedia.org/wiki/Merkle_tree), this\ncan power a rich, safe, content distribution system.\n\nPlease see the [README](https://github.com/opencontainers/go-digest/blob/aa2ec055abd10d26d539eb630a92241b781ce4bc/README.md) for more information.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYkQdjAAoJEGez3thO3II/8IYQAKoJIiJ5aoXemNPYyHwsRHDE\nPR7t5KNThBHR5bQw2TUk/IqNs1UJ1erIUH1NiVvE/2gk5EIaPdZOAE9O7lQ0CeY4\n8mVkaxeGF50odDE3VxQ17rvoyZEYfzDUsM2rlkJh67v/2u0u9kxMQl+5owhDw8WS\nOyvka0uxZW3MVia4UMsekOjDKpfykA+pA3LSLRblwdJu700zzODYT9TWwl+FwP80\nVonNT/9Fx6b6w8v+kPultAd8z/328LMASWkLRZ6LvV6B5cqpN9ilPWLwGpzD5QOQ\nyPicFRC/bFZPtmvgr6p2Iq29r8zC7PT3A9JpZL9aUuv+pOZxk6JeJw/elZVkWtz0\nuO3fkXGvodp20peM3qBgLcyQ5Z9Sk8X6eVK3FQUIjTJD9VnUW3fmdjUvoXWaP9W6\nfOPWGRz+Tx7/Ecpx4jhrls6tFXgSv6DogpWpuc+xbckltu5Z1Pq35yvY2qsNuALQ\nz7QDEZ6WLaJjt64cwOpXFJWngxLZSQUMeWIgW8bRa3xlvIAXp5+/RD2Ipi5UTk79\nBEcbcZzf9iVrSxSnyq5GvETHpnXGQ24qDsd6ml6vbztpFpkdIGHXnhD/dcHLO8Xd\nqm4HwyzPHwPJzrfOvX8q/beRSrcExry2ZaZDQfjVvERd+dLcfeVIrCVKFFITn5gJ\nqwz3QIJeCsLds3Y0TJxF\n=V9bv\n-----END PGP SIGNATURE-----\n",
  "verification": {
    "verified": false,
    "reason": "unverified_email",
    "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYkQdjAAoJEGez3thO3II/8IYQAKoJIiJ5aoXemNPYyHwsRHDE\nPR7t5KNThBHR5bQw2TUk/IqNs1UJ1erIUH1NiVvE/2gk5EIaPdZOAE9O7lQ0CeY4\n8mVkaxeGF50odDE3VxQ17rvoyZEYfzDUsM2rlkJh67v/2u0u9kxMQl+5owhDw8WS\nOyvka0uxZW3MVia4UMsekOjDKpfykA+pA3LSLRblwdJu700zzODYT9TWwl+FwP80\nVonNT/9Fx6b6w8v+kPultAd8z/328LMASWkLRZ6LvV6B5cqpN9ilPWLwGpzD5QOQ\nyPicFRC/bFZPtmvgr6p2Iq29r8zC7PT3A9JpZL9aUuv+pOZxk6JeJw/elZVkWtz0\nuO3fkXGvodp20peM3qBgLcyQ5Z9Sk8X6eVK3FQUIjTJD9VnUW3fmdjUvoXWaP9W6\nfOPWGRz+Tx7/Ecpx4jhrls6tFXgSv6DogpWpuc+xbckltu5Z1Pq35yvY2qsNuALQ\nz7QDEZ6WLaJjt64cwOpXFJWngxLZSQUMeWIgW8bRa3xlvIAXp5+/RD2Ipi5UTk79\nBEcbcZzf9iVrSxSnyq5GvETHpnXGQ24qDsd6ml6vbztpFpkdIGHXnhD/dcHLO8Xd\nqm4HwyzPHwPJzrfOvX8q/beRSrcExry2ZaZDQfjVvERd+dLcfeVIrCVKFFITn5gJ\nqwz3QIJeCsLds3Y0TJxF\n=V9bv\n-----END PGP SIGNATURE-----\n",
    "payload": "object aa2ec055abd10d26d539eb630a92241b781ce4bc\ntype commit\ntag v1.0.0-rc0\ntagger Stephen J Day <stephen.day@docker.com> 1485899297 -0800\n\nOpen Containers Go Digest 1.0.0-rc0\n\nThis the first official release candidate of the go-digest package, the common\ndigest package used across the container ecosystem.\n\nWhat is a digest? A digest is just a hash.\n\nThe most common use case for a digest is to create a content\nidentifier for use in [Content Addressable Storage](https://en.wikipedia.org/wiki/Content-addressable_storage)\nsystems:\n\n```go\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\nIn the example above, the id can be used to uniquely identify\nthe byte slice \"my content\". This allows two disparate applications\nto agree on a verifiable identifier without having to trust one\nanother.\n\nAn identifying digest can be verified, as follows:\n\n```go\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\nA `Verifier` type can be used to handle cases where an `io.Reader`\nmakes more sense:\n\n```go\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\nUsing [Merkle DAGs](https://en.wikipedia.org/wiki/Merkle_tree), this\ncan power a rich, safe, content distribution system.\n\nPlease see the [README](https://github.com/opencontainers/go-digest/blob/aa2ec055abd10d26d539eb630a92241b781ce4bc/README.md) for more information.\n"
  }
}
