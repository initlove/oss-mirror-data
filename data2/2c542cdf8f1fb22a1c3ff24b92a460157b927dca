{
  "node_id": "MDM6VGFnNDU2MjM3OjJjNTQyY2RmOGYxZmIyMmExYzNmZjI0YjkyYTQ2MDE1N2I5MjdkY2E=",
  "sha": "2c542cdf8f1fb22a1c3ff24b92a460157b927dca",
  "url": "https://api.github.com/repos/scottschiller/SoundManager2/git/tags/2c542cdf8f1fb22a1c3ff24b92a460157b927dca",
  "tagger": {
    "name": "Scott Schiller",
    "email": "spam@schillmania.com",
    "date": "2012-06-25T00:54:18Z"
  },
  "object": {
    "sha": "5ef153aca3b8a09fb3a480d901756e2a9b4e906b",
    "type": "commit",
    "url": "https://api.github.com/repos/scottschiller/SoundManager2/git/commits/5ef153aca3b8a09fb3a480d901756e2a9b4e906b"
  },
  "tag": "V2.97a.20120624",
  "message": "V2.97a.20120624 - New soundManager.setup() method, numerous HTML5 improvements for createSound(), load(), progress and reuse cases, and minor flash audio bug fixes\n\n    API: New sugar-like stuff\n\n        New soundManager.setup() mixin-style method for assigning properties and common start-up callbacks. Collects top-level soundManager configuration properties and object collections - onready, ontimeout, defaultOptions, flash9Options and movieStarOptions - under a single method call.\n\n        Upgrade / legacy note: This is a modern replacement for the direct property assignment method used in all previous versions - eg., soundManager.url = '/swfs/' - the old method continues to work for legacy support, but you should migrate to using the new method as it's much cleaner. All included demos use the new method where applicable.\n\n        New soundManager.setup() method example\n\n        soundManager.setup({\n          // required\n          url: '/path/to/swfs/',\n          // optional\n          flashVersion: 9,\n          // convenience\n          onready: function() {\n            console.log('Ready to play sound!');\n          },\n          ontimeout: function() {\n            console.log('SM2 start-up failed.');\n          },\n          // more custom parameters\n          defaultOptions: {\n            volume: 50\n          }\n        });\n\n        See soundManager.setup() for details.\n\n    Bug fixes\n\n        Improve HTML5 audio load/playback reliability + stability on iOS, and for object reuse cases (play() -> load({url: ...}). Prior behaviour was making initial HTTP request when object was created (meta/preload, not necessarily loading entire file.) Request now only happens with preload/load/play-related calls.\n\n        HTML5: Firefox seems to have changed when unloading HTML5 audio, url = '' now loads hosting page HTML (boo) instead of null / no request. Changed to about:blank like everyone else. Also fixed boolean logic on isMovieStar assignment.\n\n        Add audio/mp3 and related MIME checks for flash, correct edge case where play({type:'audio/mp3'}) would use HTML5 when preferFlash = true, due to seeming lack of Flash support for the MIME type.\n\n        Fixed old Flash 8 onload() edge case where loading from cache might return incorrect didLoad: false result - corrected by checking for a non-zero sound duration.\n\n        Properly reset SMSound.id3 = {} with internal resetProperty and public methods like load().\n\n        Edge case fix: Don't attempt to remove flash unless reference exists (prevent false warning when reboot() called in 100% HTML5 mode.)\n\n        Correct empty options JS error on internal _setup_html5() when reusing HTML5 audio object per V2.97a.20120527 bug report\n\n        Fix minor false positive (undocumented error handler case) with HTML5 play() falsely reporting 32-sound ceiling edge case and calling SMSound.onplayerror() (if assigned) when using flashVersion = 9. Should only apply when flash 9 is being used for playback, and ceiling hit.\n\n    Miscellaneous\n\n        Finally assign + use SMSound.id (instead of sID), matching createSound({id: 'foo'}) pattern; maintain legacy sID property (ancient behaviour, originally intended to avoid potential namespace conflicts many years ago - now silly and not a concern.)\n\n        Improved handling of whileloading() vs. HTML5 onload (when using HTTP range/partial requests).\n\n        HTML5 onload() (now triggered via native canplaythrough event) may fire early, followed by numerous HTML5 progress requests during playback as the audio object requests and buffers more audio ranges (eg., 0-10 seconds), eventually matching the total sound duration.\n\n        Bytes loaded / total are not available, so bytesLoaded instead reflects a fraction of \"duration loaded\", between 0 and 1 as data is buffered in. Previously, whileloading events would not fire once onload had fired under HTML5.\n\n        New (undocumented, for now) buffered array on SMSound objects; list of objects following the pattern SMSound.buffered = [{ start: 0, end: 706 }] representing loaded time ranges (somewhat similar to HTML5 TimeRanges spec, but using static properties instead of method calls with an index parameter.) Array will initially be empty, zero-length. This can be looped through to show overlays of \"loaded\" time fragments on progress bars, for example.\n\n        SMSound buffered is updated during whileloading() calls, where values are provided by the browser. For flash, will always be one item with { start: 0, end: SMSound.duration } assigned. Also stopped sending 1/1 values to whileplaying() at onload(), since HTML5 can fire onload() (via canplaythrough) very early followed by many progress (whileloading()) events.\n\n        Support note: Not all browsers (eg., Safari 5.1.7) appear to provide buffer / TimeRanges data for HTML5 audio objects. At time of writing (06/2012), Firefox, Chrome Canary, IE 9 and Opera provide TimeRanges alongside progress events.\n\n        Upgraded demos to use to soundManager.setup({...}) for most configuration cases (vs. setting soundManager.url, soundManager.defaultOptions.autoLoad directly etc.)\n\n        Warn if soundManager.setup() called with url or flashVersion, and init has already fired (ie., flash options already set + movie already loaded) where changes will not take effect until soundManager.reboot().\n\n        Assign top-level soundManager properties (eg. soundManager.url) from soundManager.setupOptions at DOMReady time; this allows legacy soundManager.url = ... assignment to work, and helps to ensure legacy-style, directly-assigned top-level property values get written back to soundManager.setupOptions.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
