{
  "node_id": "MDM6VGFnMTg0OTgxOjY1MjIyYzgzMzEyMWI0NDY2ZjliNTdlNjMxNzg0MGZmNjE1YTljZTQ=",
  "sha": "65222c833121b4466f9b57e6317840ff615a9ce4",
  "url": "https://api.github.com/repos/memcached/memcached/git/tags/65222c833121b4466f9b57e6317840ff615a9ce4",
  "tagger": {
    "name": "Dustin Sallings",
    "email": "dustin@spy.net",
    "date": "2009-05-28T20:50:22Z"
  },
  "object": {
    "sha": "c666e344fadbb1460ee0f4a148263b429999a714",
    "type": "commit",
    "url": "https://api.github.com/repos/memcached/memcached/git/commits/c666e344fadbb1460ee0f4a148263b429999a714"
  },
  "tag": "1.4.0-rc1",
  "message": "Release 1.4-rc1\n\n1 Download\n~~~~~~~~~~~\n\nDownload Link:\n\nhttp://memcached.googlecode.com/files/memcached-1.4.0-rc1.tar.gz\n\n2 New Features\n~~~~~~~~~~~~~~~\n\n2.1 Binary Protocol\n====================\n\nA new feature that brings new features.  We now have goodness like\nCAS-everywhere (e.g. delete), silent, but verifiable mutation\ncommands, and many other wonders.\n\nNote that the original protocol is *not* deprecated.  It will be\nsupported indefinitely, although some new features may only be\navailable in the binary protocol.\n\n2.1.1 Client Availability\n--------------------------\n\nMany clients for the binary protocol are available.\n\n* C\n\n  libmemcached supports just about anything you can do with a memcached\n  protocol and is the foundation for many clients in many different\n  languages (which you can find linked from the project page).\n\n  Project page: http://tangent.org/552/libmemcached.html\n\n* Java\n\n  spymemcached has very good text and binary protocol support over IPv4\n  and IPv6 with a quite comprehensive test suite.\n\n  Project page: http://code.google.com/p/spymemcached/\n\n* Protocol Spec\n\n  NIH problem?  Go write your own client.  :)\n\n  http://cloud.github.com/downloads/memcached/memcached/protocol-binary.txt\n\n2.2 Performance\n================\n\nLots of effort has gone into increasing performance.\n\nThere is no longer a build-time distinction between a single-threaded\nand multi-threaded memcached.  If you want a single-threaded\nmemcached, ask for one thread (though there'll still be utility\nthreads and other such things in the background).  This change lets us\nfocus on a future where multiple cores can be saturated for servicing\nrequests.\n\nFacebook-inspired contention reduction with per-thread stat collection\nand the Facebook connection dispatch and thread starvation prevention\ncontributions helped our scalability.\n\nLock analysis also showed us that we had quite a bit of contention on\nhash table expansion which has been moved into its own thread, greatly\nimproving the scalability on multicore hardware.\n\nA variety of smaller things also shook out of performance testing and\nanalysis.\n\nThere's also a memory optimization for users who don't actually make\nuse of CAS.  Running memcached with -C disables the use of CAS\nresulting in a savings of about eight bytes per item.  If you have big\ncaches, and don't use CAS, this can lead to a considerable savings.\n\n2.3 Stats\n==========\n\nThere are several new stats and some new ways to look at older stats.\n\n2.3.1 New Stats\n----------------\n\n* stats settings\n\n  Show all current server settings (useful for troubleshooting as well\n  as internal verification).\n\n* Delete\n\n  The global stats now contain statistics on deletion.\n\n  delete_hits refers to the number of times a deletion command was\n  issued which resulted in a modification of the cache while\n  delete_misses refers to the number of times a deletion command was\n  issued which had no effect due to a key mismatch.\n\n* Incr/Decr\n\n  Incr and decr each have a pair of stats showing when a\n  successful/unsuccessful incr occurred.  incr_hits, incr_misses,\n  decr_hits, and decr_misses show where such mutations worked and where\n  they failed to find an existing object to mutate.\n\n* CAS\n\n  CAS stats are tracked in three different ways:\n\n  + cas_hits\n\n    Number of attempts to CAS in a new value that worked.\n\n  + cas_misses\n\n    Number of attempts to CAS in a value where the key was not found.\n\n  + cas_badval\n\n    Number of attempts to CAS in a value where the CAS failed due to the\n    object changing between the gets and the update.\n\n* slab class evicted time\n\n  Per slab class, you can now see how recently accessed the most recent\n  evicted data was.  This is a useful gauge to determine eviction\n  velocity on a slab so you can know whether evictions are healthy or if\n  you've got a problem.\n\n2.3.2 More Granular Stats\n--------------------------\n\nWhere possible, stats are now tracked individually by slab class.  The\nfollowing stats are available on a per-slab-class basis (via \"stats slabs\"):\n\n  * get_hits\n  * cmd_set\n  * delete_hits\n  * incr_hits\n  * decr_hits\n  * cas_hits\n  * cas_badval\n\n(misses are obviously not available as they refer to a non-existent item)\n\n2.3.3 Removed stats\n--------------------\n\n\"stats malloc\" and \"stats maps\" have been removed.\n\nIf you depended on these commands for anything, please let us know so\nwe may suggest alternatives for you.\n\n2.4 Misc\n=========\n- More tests\n- More/better documentation\n- Code cleanup\n\n3 Bug Fixes\n~~~~~~~~~~~~\n\n  * Build fixes on ubuntu (gcc and icc) and FreeBSD\n  * bad interaction with cas + incr (bug 15)\n  * setuid failures are reported properly at daemonization time\n  * decr overflow causing unnecessary truncation to 0 (bug 21)\n  * failure to bind on Linux with no network (i.e. laptop dev)\n  * some memcached-tool cleanup\n  * Alignment bug in binary stats (bug26)\n  * Occasional buffer overflow in stats (bug27)\n  * Try to recycle memory more aggressively. (bug14)\n  * incr validation (bug31)\n  * 64-bit incr/decr delta fixes (bug21)\n  * ascii UDP set (bug36)\n  * stats slabs' used chunks (bug29)\n  * stats reset should reset item stats, eviction counters, etc... (bug22)\n  * Fix all stat buffer management\n\n4 Development Info\n~~~~~~~~~~~~~~~~~~~\n\nWe've added a bunch of tests and new code coverage reports.\n\nAll included code in this release has been tested against the\nfollowing platforms (using the in-tree test suite):\n\n  * ubuntu 8.10 (64-bit, both gcc and icc)\n  * ubuntu 8.04 (32-bit)\n  * OS X 10.5 (ppc and intel)\n  * OpenSolaris 5.11 x86 (with and without dtrace)\n  * Solaris 10 sparc (with and without dtrace)\n  * FreeBSD 7 x86\n\n5 Feedback\n~~~~~~~~~~~\n\nPlease try this version.  Make it suffer.  Report feedback to the list\nor file bugs as you find them.\n\n  * Mailing List:  http://groups.google.com/group/memcached\n  * Issue Tracker: http://code.google.com/p/memcached/issues/list\n  * IRC:  #memcached on freenode\n\n6 Contributors\n~~~~~~~~~~~~~~~\n\nThe following people contributed to this release since 1.2.8.\n\nNote that this is based on who contributed changes, not how they were\ndone.  In many cases, a code snippet on the mailing list or a bug\nreport ended up as a commit with your name on it.\n\nNote that this is just a summary of how many changes each person made\nwhich doesn't necessarily reflect how significant each change was.\nFor details on what led up into a branch, either grab the git repo and\nlook at the output of `git log 1.2.8..1.4.0-rc1` or use a web view.\n\n  * Repo list: http://code.google.com/p/memcached/wiki/DevelopmentRepos\n  * Web View:  http://github.com/memcached/memcached/commits/1.4.0-rc1\n\n  144  Dustin Sallings\n   60  Trond Norbye\n   33  Toru Maesaka\n   30  dormando\n   13  Steve Yen\n    7  hachi\n    6  Aaron Stone\n    5  Brad Fitzpatrick\n    4  Victor Kirkebo\n    3  Eric Lambert\n    2  Brian Aker\n    1  Chris Goffinet\n    1  Ricky Zhou\n    1  Clinton Webb\n    1  Evan Klitzke\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.9 (Darwin)\n\niEYEABECAAYFAkoe+Q4ACgkQeWDnv0PlnVT5LwCfShdqc30TJdfRRX/m6/Nc+WDg\nINIAoJuAqu84Q2vCKlc3SME9rCTEFQ8x\n=7u/H\n-----END PGP SIGNATURE-----\n",
  "verification": {
    "verified": false,
    "reason": "unverified_email",
    "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.9 (Darwin)\n\niEYEABECAAYFAkoe+Q4ACgkQeWDnv0PlnVT5LwCfShdqc30TJdfRRX/m6/Nc+WDg\nINIAoJuAqu84Q2vCKlc3SME9rCTEFQ8x\n=7u/H\n-----END PGP SIGNATURE-----\n",
    "payload": "object c666e344fadbb1460ee0f4a148263b429999a714\ntype commit\ntag 1.4.0-rc1\ntagger Dustin Sallings <dustin@spy.net> 1243543822 -0700\n\nRelease 1.4-rc1\n\n1 Download\n~~~~~~~~~~~\n\nDownload Link:\n\nhttp://memcached.googlecode.com/files/memcached-1.4.0-rc1.tar.gz\n\n2 New Features\n~~~~~~~~~~~~~~~\n\n2.1 Binary Protocol\n====================\n\nA new feature that brings new features.  We now have goodness like\nCAS-everywhere (e.g. delete), silent, but verifiable mutation\ncommands, and many other wonders.\n\nNote that the original protocol is *not* deprecated.  It will be\nsupported indefinitely, although some new features may only be\navailable in the binary protocol.\n\n2.1.1 Client Availability\n--------------------------\n\nMany clients for the binary protocol are available.\n\n* C\n\n  libmemcached supports just about anything you can do with a memcached\n  protocol and is the foundation for many clients in many different\n  languages (which you can find linked from the project page).\n\n  Project page: http://tangent.org/552/libmemcached.html\n\n* Java\n\n  spymemcached has very good text and binary protocol support over IPv4\n  and IPv6 with a quite comprehensive test suite.\n\n  Project page: http://code.google.com/p/spymemcached/\n\n* Protocol Spec\n\n  NIH problem?  Go write your own client.  :)\n\n  http://cloud.github.com/downloads/memcached/memcached/protocol-binary.txt\n\n2.2 Performance\n================\n\nLots of effort has gone into increasing performance.\n\nThere is no longer a build-time distinction between a single-threaded\nand multi-threaded memcached.  If you want a single-threaded\nmemcached, ask for one thread (though there'll still be utility\nthreads and other such things in the background).  This change lets us\nfocus on a future where multiple cores can be saturated for servicing\nrequests.\n\nFacebook-inspired contention reduction with per-thread stat collection\nand the Facebook connection dispatch and thread starvation prevention\ncontributions helped our scalability.\n\nLock analysis also showed us that we had quite a bit of contention on\nhash table expansion which has been moved into its own thread, greatly\nimproving the scalability on multicore hardware.\n\nA variety of smaller things also shook out of performance testing and\nanalysis.\n\nThere's also a memory optimization for users who don't actually make\nuse of CAS.  Running memcached with -C disables the use of CAS\nresulting in a savings of about eight bytes per item.  If you have big\ncaches, and don't use CAS, this can lead to a considerable savings.\n\n2.3 Stats\n==========\n\nThere are several new stats and some new ways to look at older stats.\n\n2.3.1 New Stats\n----------------\n\n* stats settings\n\n  Show all current server settings (useful for troubleshooting as well\n  as internal verification).\n\n* Delete\n\n  The global stats now contain statistics on deletion.\n\n  delete_hits refers to the number of times a deletion command was\n  issued which resulted in a modification of the cache while\n  delete_misses refers to the number of times a deletion command was\n  issued which had no effect due to a key mismatch.\n\n* Incr/Decr\n\n  Incr and decr each have a pair of stats showing when a\n  successful/unsuccessful incr occurred.  incr_hits, incr_misses,\n  decr_hits, and decr_misses show where such mutations worked and where\n  they failed to find an existing object to mutate.\n\n* CAS\n\n  CAS stats are tracked in three different ways:\n\n  + cas_hits\n\n    Number of attempts to CAS in a new value that worked.\n\n  + cas_misses\n\n    Number of attempts to CAS in a value where the key was not found.\n\n  + cas_badval\n\n    Number of attempts to CAS in a value where the CAS failed due to the\n    object changing between the gets and the update.\n\n* slab class evicted time\n\n  Per slab class, you can now see how recently accessed the most recent\n  evicted data was.  This is a useful gauge to determine eviction\n  velocity on a slab so you can know whether evictions are healthy or if\n  you've got a problem.\n\n2.3.2 More Granular Stats\n--------------------------\n\nWhere possible, stats are now tracked individually by slab class.  The\nfollowing stats are available on a per-slab-class basis (via \"stats slabs\"):\n\n  * get_hits\n  * cmd_set\n  * delete_hits\n  * incr_hits\n  * decr_hits\n  * cas_hits\n  * cas_badval\n\n(misses are obviously not available as they refer to a non-existent item)\n\n2.3.3 Removed stats\n--------------------\n\n\"stats malloc\" and \"stats maps\" have been removed.\n\nIf you depended on these commands for anything, please let us know so\nwe may suggest alternatives for you.\n\n2.4 Misc\n=========\n- More tests\n- More/better documentation\n- Code cleanup\n\n3 Bug Fixes\n~~~~~~~~~~~~\n\n  * Build fixes on ubuntu (gcc and icc) and FreeBSD\n  * bad interaction with cas + incr (bug 15)\n  * setuid failures are reported properly at daemonization time\n  * decr overflow causing unnecessary truncation to 0 (bug 21)\n  * failure to bind on Linux with no network (i.e. laptop dev)\n  * some memcached-tool cleanup\n  * Alignment bug in binary stats (bug26)\n  * Occasional buffer overflow in stats (bug27)\n  * Try to recycle memory more aggressively. (bug14)\n  * incr validation (bug31)\n  * 64-bit incr/decr delta fixes (bug21)\n  * ascii UDP set (bug36)\n  * stats slabs' used chunks (bug29)\n  * stats reset should reset item stats, eviction counters, etc... (bug22)\n  * Fix all stat buffer management\n\n4 Development Info\n~~~~~~~~~~~~~~~~~~~\n\nWe've added a bunch of tests and new code coverage reports.\n\nAll included code in this release has been tested against the\nfollowing platforms (using the in-tree test suite):\n\n  * ubuntu 8.10 (64-bit, both gcc and icc)\n  * ubuntu 8.04 (32-bit)\n  * OS X 10.5 (ppc and intel)\n  * OpenSolaris 5.11 x86 (with and without dtrace)\n  * Solaris 10 sparc (with and without dtrace)\n  * FreeBSD 7 x86\n\n5 Feedback\n~~~~~~~~~~~\n\nPlease try this version.  Make it suffer.  Report feedback to the list\nor file bugs as you find them.\n\n  * Mailing List:  http://groups.google.com/group/memcached\n  * Issue Tracker: http://code.google.com/p/memcached/issues/list\n  * IRC:  #memcached on freenode\n\n6 Contributors\n~~~~~~~~~~~~~~~\n\nThe following people contributed to this release since 1.2.8.\n\nNote that this is based on who contributed changes, not how they were\ndone.  In many cases, a code snippet on the mailing list or a bug\nreport ended up as a commit with your name on it.\n\nNote that this is just a summary of how many changes each person made\nwhich doesn't necessarily reflect how significant each change was.\nFor details on what led up into a branch, either grab the git repo and\nlook at the output of `git log 1.2.8..1.4.0-rc1` or use a web view.\n\n  * Repo list: http://code.google.com/p/memcached/wiki/DevelopmentRepos\n  * Web View:  http://github.com/memcached/memcached/commits/1.4.0-rc1\n\n  144  Dustin Sallings\n   60  Trond Norbye\n   33  Toru Maesaka\n   30  dormando\n   13  Steve Yen\n    7  hachi\n    6  Aaron Stone\n    5  Brad Fitzpatrick\n    4  Victor Kirkebo\n    3  Eric Lambert\n    2  Brian Aker\n    1  Chris Goffinet\n    1  Ricky Zhou\n    1  Clinton Webb\n    1  Evan Klitzke\n"
  }
}
