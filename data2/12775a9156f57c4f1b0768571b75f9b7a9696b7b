{
  "node_id": "MDM6VGFnMzAxNzQyOjEyNzc1YTkxNTZmNTdjNGYxYjA3Njg1NzFiNzVmOWI3YTk2OTZiN2I=",
  "sha": "12775a9156f57c4f1b0768571b75f9b7a9696b7b",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/12775a9156f57c4f1b0768571b75f9b7a9696b7b",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2015-11-06T20:09:20Z"
  },
  "object": {
    "sha": "26a5a6b8076ac0b6124b2bba9ff63627595f4fd6",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/26a5a6b8076ac0b6124b2bba9ff63627595f4fd6"
  },
  "tag": "v4.3.0",
  "message": "Tornado 4.3\n\nNov 6, 2015\n-----------\n\nHighlights\n~~~~~~~~~~\n\n* The new async/await keywords in Python 3.5 are supported. In most cases,\n  ``async def`` can be used in place of the ``@gen.coroutine`` decorator.\n  Inside a function defined with ``async def``, use ``await`` instead of\n  ``yield`` to wait on an asynchronous operation. Coroutines defined with\n  async/await will be faster than those defined with ``@gen.coroutine`` and\n  ``yield``, but do not support some features including `.Callback`/`.Wait` or\n  the ability to yield a Twisted ``Deferred``. See :ref:`the users'\n  guide <native_coroutines>` for more.\n* The async/await keywords are also available when compiling with Cython in\n  older versions of Python.\n\nDeprecation notice\n~~~~~~~~~~~~~~~~~~\n\n* This will be the last release of Tornado to support Python 2.6 or 3.2.\n  Note that PyPy3 will continue to be supported even though it implements\n  a mix of Python 3.2 and 3.3 features.\n\nInstallation\n~~~~~~~~~~~~\n\n* Tornado has several new dependencies: ``ordereddict`` on Python 2.6,\n  ``singledispatch`` on all Python versions prior to 3.4 (This was an\n  optional dependency in prior versions of Tornado, and is now\n  mandatory), and ``backports_abc>=0.4`` on all versions prior to\n  3.5. These dependencies will be installed automatically when installing\n  with ``pip`` or ``setup.py install``. These dependencies will not\n  be required when running on Google App Engine.\n* Binary wheels are provided for Python 3.5 on Windows (32 and 64 bit).\n\n`tornado.auth`\n~~~~~~~~~~~~~~\n\n* New method `.OAuth2Mixin.oauth2_request` can be used to make authenticated\n  requests with an access token.\n* Now compatible with callbacks that have been compiled with Cython.\n\n`tornado.autoreload`\n~~~~~~~~~~~~~~~~~~~~\n\n* Fixed an issue with the autoreload command-line wrapper in which\n  imports would be incorrectly interpreted as relative.\n\n`tornado.curl_httpclient`\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Fixed parsing of multi-line headers.\n* ``allow_nonstandard_methods=True`` now bypasses body sanity checks,\n  in the same way as in ``simple_httpclient``.\n* The ``PATCH`` method now allows a body without\n  ``allow_nonstandard_methods=True``.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n* `.WaitIterator` now supports the ``async for`` statement on Python 3.5.\n* ``@gen.coroutine`` can be applied to functions compiled with Cython.\n  On python versions prior to 3.5, the ``backports_abc`` package must\n  be installed for this functionality.\n* ``Multi`` and `.multi_future` are deprecated and replaced by\n  a unified function `.multi`.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n* `tornado.httpclient.HTTPError` is now copyable with the `copy` module.\n\n`tornado.httpserver`\n~~~~~~~~~~~~~~~~~~~~\n\n* Requests containing both ``Content-Length`` and ``Transfer-Encoding``\n  will be treated as an error.\n\n`tornado.httputil`\n~~~~~~~~~~~~~~~~~~\n\n* `.HTTPHeaders` can now be pickled and unpickled.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n* ``IOLoop(make_current=True)`` now works as intended instead\n  of raising an exception.\n* The Twisted and asyncio IOLoop implementations now clear\n  ``current()`` when they exit, like the standard IOLoops.\n* `.IOLoop.add_callback` is faster in the single-threaded case.\n* `.IOLoop.add_callback` no longer raises an error when called on\n  a closed IOLoop, but the callback will not be invoked.\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n* Coroutine-style usage of `.IOStream` now converts most errors into\n  `.StreamClosedError`, which has the effect of reducing log noise from\n  exceptions that are outside the application's control (especially\n  SSL errors).\n* `.StreamClosedError` now has a ``real_error`` attribute which indicates\n  why the stream was closed. It is the same as the ``error`` attribute of\n  `.IOStream` but may be more easily accessible than the `.IOStream` itself.\n* Improved error handling in `~.BaseIOStream.read_until_close`.\n* Logging is less noisy when an SSL server is port scanned.\n* ``EINTR`` is now handled on all reads.\n\n`tornado.locale`\n~~~~~~~~~~~~~~~~\n\n* `tornado.locale.load_translations` now accepts encodings other than\n  UTF-8. UTF-16 and UTF-8 will be detected automatically if a BOM is\n  present; for other encodings `.load_translations` has an ``encoding``\n  parameter.\n\n`tornado.locks`\n~~~~~~~~~~~~~~~\n\n* `.Lock` and `.Semaphore` now support the ``async with`` statement on\n  Python 3.5.\n\n`tornado.log`\n~~~~~~~~~~~~~\n\n* A new time-based log rotation mode is available with\n  ``--log_rotate_mode=time``, ``--log-rotate-when``, and\n  ``log-rotate-interval``.\n\n`tornado.netutil`\n~~~~~~~~~~~~~~~~~\n\n* `.bind_sockets` now supports ``SO_REUSEPORT`` with the ``reuse_port=True``\n  argument.\n\n`tornado.options`\n~~~~~~~~~~~~~~~~~\n\n* Dashes and underscores are now fully interchangeable in option names.\n\n`tornado.queues`\n~~~~~~~~~~~~~~~~\n\n* `.Queue` now supports the ``async for`` statement on Python 3.5.\n\n`tornado.simple_httpclient`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* When following redirects, ``streaming_callback`` and\n  ``header_callback`` will no longer be run on the redirect responses\n  (only the final non-redirect).\n* Responses containing both ``Content-Length`` and ``Transfer-Encoding``\n  will be treated as an error.\n\n`tornado.template`\n~~~~~~~~~~~~~~~~~~\n\n* `tornado.template.ParseError` now includes the filename in addition to\n  line number.\n* Whitespace handling has become more configurable. The `.Loader`\n  constructor now has a ``whitespace`` argument, there is a new\n  ``template_whitespace`` `.Application` setting, and there is a new\n  ``{% whitespace %}`` template directive. All of these options take\n  a mode name defined in the `tornado.template.filter_whitespace` function.\n  The default mode is ``single``, which is the same behavior as prior\n  versions of Tornado.\n* Non-ASCII filenames are now supported.\n\n`tornado.testing`\n~~~~~~~~~~~~~~~~~\n\n* `.ExpectLog` objects now have a boolean ``logged_stack`` attribute to\n  make it easier to test whether an exception stack trace was logged.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n* The hard limit of 4000 bytes per outgoing header has been removed.\n* `.StaticFileHandler` returns the correct ``Content-Type`` for files\n  with ``.gz``, ``.bz2``, and ``.xz`` extensions.\n* Responses smaller than 1000 bytes will no longer be compressed.\n* The default gzip compression level is now 6 (was 9).\n* Fixed a regression in Tornado 4.2.1 that broke `.StaticFileHandler`\n  with a ``path`` of ``/``.\n* `tornado.web.HTTPError` is now copyable with the `copy` module.\n* The exception `.Finish` now accepts an argument which will be passed to\n  the method `.RequestHandler.finish`.\n* New `.Application` setting ``xsrf_cookie_kwargs`` can be used to set\n  additional attributes such as ``secure`` or ``httponly`` on the\n  XSRF cookie.\n* `.Application.listen` now returns the `.HTTPServer` it created.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n* Fixed handling of continuation frames when compression is enabled.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
