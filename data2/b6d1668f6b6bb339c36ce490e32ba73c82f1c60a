{
  "node_id": "MDM6VGFnMzAxNzQyOmI2ZDE2NjhmNmI2YmIzMzljMzZjZTQ5MGUzMmJhNzNjODJmMWM2MGE=",
  "sha": "b6d1668f6b6bb339c36ce490e32ba73c82f1c60a",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/b6d1668f6b6bb339c36ce490e32ba73c82f1c60a",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2018-03-05T13:41:51Z"
  },
  "object": {
    "sha": "3fc6aec1a5bd438ba52cb762fc20792062a95f05",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/3fc6aec1a5bd438ba52cb762fc20792062a95f05"
  },
  "tag": "v5.0.0",
  "message": "What's new in Tornado 5.0\n\nMar 5, 2018\n-----------\n\nHighlights\n~~~~~~~~~~\n\n- The focus of this release is improving integration with `asyncio`.\n  On Python 3, the `.IOLoop` is always a wrapper around the `asyncio`\n  event loop, and `asyncio.Future` and `asyncio.Task` are used instead\n  of their Tornado counterparts. This means that libraries based on\n  `asyncio` can be mixed relatively seamlessly with those using\n  Tornado. While care has been taken to minimize the disruption from\n  this change, code changes may be required for compatibility with\n  Tornado 5.0, as detailed in the following section.\n- Tornado 5.0 supports Python 2.7.9+ and 3.4+. Python 2.7 and 3.4 are\n  deprecated and support for them will be removed in Tornado 6.0,\n  which will require Python 3.5+.\n\nBackwards-compatibility notes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- Python 3.3 is no longer supported.\n- Versions of Python 2.7 that predate the `ssl` module update are no\n  longer supported. (The `ssl` module was updated in version 2.7.9,\n  although in some distributions the updates are present in builds\n  with a lower version number. Tornado requires `ssl.SSLContext`,\n  `ssl.create_default_context`, and `ssl.match_hostname`)\n- Versions of Python 3.5 prior to 3.5.2 are no longer supported due to\n  a change in the async iterator protocol in that version.\n- The ``trollius`` project (`asyncio` backported to Python 2) is no\n  longer supported.\n- `tornado.concurrent.Future` is now an alias for `asyncio.Future`\n  when running on Python 3. This results in a number of minor\n  behavioral changes:\n\n    - `.Future` objects can only be created while there is a current\n      `.IOLoop`\n    - The timing of callbacks scheduled with\n      ``Future.add_done_callback`` has changed.\n      `tornado.concurrent.future_add_done_callback` can be used to\n      make the behavior more like older versions of Tornado (but not\n      identical). Some of these changes are also present in the Python\n      2 version of `tornado.concurrent.Future` to minimize the\n      difference between Python 2 and 3.\n    - Cancellation is now partially supported, via\n      `asyncio.Future.cancel`. A canceled `.Future` can no longer have\n      its result set. Applications that handle `~asyncio.Future`\n      objects directly may want to use\n      `tornado.concurrent.future_set_result_unless_cancelled`. In\n      native coroutines, cancellation will cause an exception to be\n      raised in the coroutine.\n    - The ``exc_info`` and ``set_exc_info`` methods are no longer\n      present. Use `tornado.concurrent.future_set_exc_info` to replace\n      the latter, and raise the exception with\n      `~asyncio.Future.result` to replace the former.\n- ``io_loop`` arguments to many Tornado functions have been removed.\n  Use `.IOLoop.current()` instead of passing `.IOLoop` objects\n  explicitly.\n- On Python 3, `.IOLoop` is always a wrapper around the `asyncio`\n  event loop. ``IOLoop.configure`` is effectively removed on Python 3\n  (for compatibility, it may be called to redundantly specify the\n  `asyncio`-backed `.IOLoop`)\n- `.IOLoop.instance` is now a deprecated alias for `.IOLoop.current`.\n  Applications that need the cross-thread communication behavior\n  facilitated by `.IOLoop.instance` should use their own global variable\n  instead.\n\nOther notes\n~~~~~~~~~~~\n\n- The ``futures`` (`concurrent.futures` backport) package is now required\n  on Python 2.7.\n- The ``certifi`` and ``backports.ssl-match-hostname`` packages are no\n  longer required on Python 2.7.\n- Python 3.6 or higher is recommended, because it features more\n  efficient garbage collection of `asyncio.Future` objects.\n\n`tornado.auth`\n~~~~~~~~~~~~~~\n\n- `.GoogleOAuth2Mixin` now uses a newer set of URLs.\n\n`tornado.autoreload`\n~~~~~~~~~~~~~~~~~~~~\n\n- On Python 3, uses ``__main__.__spec`` to more reliably reconstruct\n  the original command line and avoid modifying ``PYTHONPATH``.\n- The ``io_loop`` argument to `tornado.autoreload.start` has been removed.\n\n`tornado.concurrent`\n~~~~~~~~~~~~~~~~~~~~\n\n- `tornado.concurrent.Future` is now an alias for `asyncio.Future`\n  when running on Python 3. See \"Backwards-compatibility notes\" for\n  more.\n- Setting the result of a ``Future`` no longer blocks while callbacks\n  are being run. Instead, the callbacks are scheduled on the next\n  `.IOLoop` iteration.\n- The deprecated alias ``tornado.concurrent.TracebackFuture`` has been\n  removed.\n- `tornado.concurrent.chain_future` now works with all three kinds of\n  ``Futures`` (Tornado, `asyncio`, and `concurrent.futures`)\n- The ``io_loop`` argument to `tornado.concurrent.run_on_executor` has\n  been removed.\n- New functions `.future_set_result_unless_cancelled`,\n  `.future_set_exc_info`, and `.future_add_done_callback` help mask\n  the difference between `asyncio.Future` and Tornado's previous\n  ``Future`` implementation.\n\n`tornado.curl_httpclient`\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- Improved debug logging on Python 3.\n- The ``time_info`` response attribute now includes ``appconnect`` in\n  addition to other measurements.\n- Closing a `.CurlAsyncHTTPClient` now breaks circular references that\n  could delay garbage collection.\n- The ``io_loop`` argument to the `.CurlAsyncHTTPClient` constructor\n  has been removed.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n- ``tornado.gen.TimeoutError`` is now an alias for\n  `tornado.util.TimeoutError`.\n- Leak detection for ``Futures`` created by this module now attributes\n  them to their proper caller instead of the coroutine machinery.\n- Several circular references that could delay garbage collection have\n  been broken up.\n- On Python 3, `asyncio.Task` is used instead of the Tornado coroutine\n  runner. This improves compatibility with some `asyncio` libraries\n  and adds support for cancellation.\n- The ``io_loop`` arguments to ``YieldFuture`` and `.with_timeout` have\n  been removed.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n- The ``io_loop`` argument to all `.AsyncHTTPClient` constructors has\n  been removed.\n\n`tornado.httpserver`\n~~~~~~~~~~~~~~~~~~~~\n\n- It is now possible for a client to reuse a connection after sending\n  a chunked request.\n- If a client sends a malformed request, the server now responds with\n  a 400 error instead of simply closing the connection.\n- ``Content-Length`` and ``Transfer-Encoding`` headers are no longer\n  sent with 1xx or 204 responses (this was already true of 304\n  responses).\n- When closing a connection to a HTTP/1.1 client, the ``Connection:\n  close`` header is sent with the response.\n- The ``io_loop`` argument to the `.HTTPServer` constructor has been\n  removed.\n- If more than one ``X-Scheme`` or ``X-Forwarded-Proto`` header is\n  present, only the last is used.\n\n`tornado.httputil`\n~~~~~~~~~~~~~~~~~~\n\n- The string representation of `.HTTPServerRequest` objects (which are\n  sometimes used in log messages) no longer includes the request\n  headers.\n- New function `.qs_to_qsl` converts the result of\n  `urllib.parse.parse_qs` to name-value pairs.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n- ``tornado.ioloop.TimeoutError`` is now an alias for\n  `tornado.util.TimeoutError`.\n- `.IOLoop.instance` is now a deprecated alias for `.IOLoop.current`.\n- `.IOLoop.install` and `.IOLoop.clear_instance` are deprecated.\n- ``IOLoop.initialized`` has been removed.\n- On Python 3, the `asyncio`-backed `.IOLoop` is always used and\n  alternative `.IOLoop` implementations cannot be configured.\n  `.IOLoop.current` and related methods pass through to\n  `asyncio.get_event_loop`.\n- `~.IOLoop.run_sync` cancels its argument on a timeout. This\n  results in better stack traces (and avoids log messages about leaks)\n  in native coroutines.\n- New methods `.IOLoop.run_in_executor` and\n  `.IOLoop.set_default_executor` make it easier to run functions in\n  other threads from native coroutines (since\n  `concurrent.futures.Future` does not support ``await``).\n- ``PollIOLoop`` (the default on Python 2) attempts to detect misuse\n  of `.IOLoop` instances across `os.fork`.\n- The ``io_loop`` argument to `.PeriodicCallback` has been removed.\n- It is now possible to create a `.PeriodicCallback` in one thread\n  and start it in another without passing an explicit event loop.\n- The `.IOLoop.set_blocking_signal_threshold` and\n  `.IOLoop.set_blocking_log_threshold` methods are deprecated because\n  they are not implemented for the `asyncio` event loop`. Use the\n  ``PYTHONASYNCIODEBUG=1`` environment variable instead.\n- `.IOLoop.clear_current` now works if it is called before any\n  current loop is established.\n- The ``IOLoop.initialized`` method has been removed.\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n- The ``io_loop`` argument to the `.IOStream` constructor has been removed.\n- New method `.BaseIOStream.read_into` provides a minimal-copy alternative to\n  `.BaseIOStream.read_bytes`.\n- `.BaseIOStream.write` is now much more efficient for very large amounts of data.\n- Fixed some cases in which ``IOStream.error`` could be inaccurate.\n- Writing a `memoryview` can no longer result in \"BufferError:\n  Existing exports of data: object cannot be re-sized\".\n\n`tornado.locks`\n~~~~~~~~~~~~~~~\n\n- As a side effect of the ``Future`` changes, waiters are always\n  notified asynchronously with respect to `.Condition.notify`.\n\n`tornado.netutil`\n~~~~~~~~~~~~~~~~~\n\n- The default `.Resolver` now uses `.IOLoop.run_in_executor`.\n  `.ExecutorResolver`, `.BlockingResolver`, and `.ThreadedResolver` are\n  deprecated.\n- The ``io_loop`` arguments to `.add_accept_handler`,\n  `.ExecutorResolver`, and `.ThreadedResolver` have been removed.\n- `.add_accept_handler` returns a callable which can be used to remove\n  all handlers that were added.\n- `.OverrideResolver` now accepts per-family overrides.\n\n`tornado.options`\n~~~~~~~~~~~~~~~~~\n\n- Duplicate option names are now detected properly whether they use\n  hyphens or underscores.\n\n`tornado.platform.asyncio`\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- `.AsyncIOLoop` and `.AsyncIOMainLoop` are now used automatically\n  when appropriate; referencing them explicitly is no longer\n  recommended.\n- Starting an `.IOLoop` or making it current now also sets the\n  `asyncio` event loop for the current thread. Closing an `.IOLoop`\n  closes the corresponding `asyncio` event loop.\n- `.to_tornado_future` and `.to_asyncio_future` are deprecated since\n  they are now no-ops.\n- `~.AnyThreadEventLoopPolicy` can now be used to easily allow the creation\n  of event loops on any thread (similar to Tornado's prior policy).\n\n`tornado.platform.caresresolver`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- The ``io_loop`` argument to `.CaresResolver` has been removed.\n\n`tornado.platform.twisted`\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- The ``io_loop`` arguments to `.TornadoReactor`, `.TwistedResolver`,\n  and `tornado.platform.twisted.install` have been removed.\n\n`tornado.process`\n~~~~~~~~~~~~~~~~~\n\n- The ``io_loop`` argument to the `.Subprocess` constructor and\n  `.Subprocess.initialize` has been removed.\n\n`tornado.routing`\n~~~~~~~~~~~~~~~~~\n\n- A default 404 response is now generated if no delegate is found for\n  a request.\n\n`tornado.simple_httpclient`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- The ``io_loop`` argument to `.SimpleAsyncHTTPClient` has been removed.\n- TLS is now configured according to `ssl.create_default_context` by\n  default.\n\n`tornado.tcpclient`\n~~~~~~~~~~~~~~~~~~~\n\n- The ``io_loop`` argument to the `.TCPClient` constructor has been\n  removed.\n- `.TCPClient.connect` has a new ``timeout`` argument.\n\n`tornado.tcpserver`\n~~~~~~~~~~~~~~~~~~~\n\n- The ``io_loop`` argument to the `.TCPServer` constructor has been\n  removed.\n- `.TCPServer` no longer logs ``EBADF`` errors during shutdown.\n\n`tornado.testing`\n~~~~~~~~~~~~~~~~~\n\n- The deprecated ``tornado.testing.get_unused_port`` and\n  ``tornado.testing.LogTrapTestCase`` have been removed.\n- `.AsyncHTTPTestCase.fetch` now supports absolute URLs.\n- `.AsyncHTTPTestCase.fetch` now connects to ``127.0.0.1``\n  instead of ``localhost`` to be more robust against faulty\n  ipv6 configurations.\n\n`tornado.util`\n~~~~~~~~~~~~~~\n\n- `tornado.util.TimeoutError` replaces ``tornado.gen.TimeoutError``\n  and ``tornado.ioloop.TimeoutError``.\n- `.Configurable` now supports configuration at multiple levels of an\n  inheritance hierarchy.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n- `.RequestHandler.set_status` no longer requires that the given\n  status code appear in `http.client.responses`.\n- It is no longer allowed to send a body with 1xx or 204 responses.\n- Exception handling now breaks up reference cycles that could delay\n  garbage collection.\n- `.RedirectHandler` now copies any query arguments from the request\n  to the redirect location.\n- If both ``If-None-Match`` and ``If-Modified-Since`` headers are present\n  in a request to `.StaticFileHandler`, the latter is now ignored.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n- The C accelerator now operates on multiple bytes at a time to\n  improve performance.\n- Requests with invalid websocket headers now get a response with\n  status code 400 instead of a closed connection.\n- `.WebSocketHandler.write_message` now raises `.WebSocketClosedError` if\n  the connection closes while the write is in progress.\n- The ``io_loop`` argument to `.websocket_connect` has been removed.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
