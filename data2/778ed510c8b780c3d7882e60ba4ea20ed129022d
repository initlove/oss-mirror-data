{
  "node_id": "MDM6VGFnMzAxNzQyOjc3OGVkNTEwYzhiNzgwYzNkNzg4MmU2MGJhNGVhMjBlZDEyOTAyMmQ=",
  "sha": "778ed510c8b780c3d7882e60ba4ea20ed129022d",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/778ed510c8b780c3d7882e60ba4ea20ed129022d",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2011-02-20T20:56:55Z"
  },
  "object": {
    "sha": "f5436204e62b1f7b2716a21e024ae2c572739cf2",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/f5436204e62b1f7b2716a21e024ae2c572739cf2"
  },
  "tag": "v1.2.0",
  "message": "We are pleased to announce the release of Tornado 1.2, available from\nhttp://github.com/downloads/facebook/tornado/tornado-1.2.tar.gz\n\nBackwards compatibility notes:\n* This release includes the backwards-incompatible security change from\n  version 1.1.1.  Users upgrading from 1.1 or earlier should read the\n  release notes from that release:\n  http://groups.google.com/group/python-tornado/browse_thread/thread/b36191c781580cde\n* StackContexts that do something other than catch exceptions may need to\n  be modified to be reentrant.\n  https://github.com/facebook/tornado/commit/7a7e24143e77481d140fb5579bc67e4c45cbcfad\n* When XSRF tokens are used, the token must also be present on PUT and\n  DELETE requests (anything but GET and HEAD)\n\nNew features:\n* A new HTTP client implementation is available in the module\n  tornado.simple_httpclient.  This HTTP client does not depend on pycurl.\n  It has not yet been tested extensively in production, but is intended\n  to eventually replace the pycurl-based HTTP client in a future release of\n  Tornado.  To transparently replace tornado.httpclient.AsyncHTTPClient with\n  this new implementation, you can set the environment variable\n  USE_SIMPLE_HTTPCLIENT=1 (note that the next release of Tornado will\n  likely include a different way to select HTTP client implementations)\n* Request logging is now done by the Application rather than the\n  RequestHandler.  Logging behavior may be customized by either overriding\n  Application.log_request in a subclass or by passing log_function\n  as an Application setting\n* Application.listen(port): Convenience method as an alternative to\n  explicitly creating an HTTPServer\n* tornado.escape.linkify(): Wrap urls in <a> tags\n* RequestHandler.create_signed_value(): Create signatures like the\n  secure_cookie methods without setting cookies.\n* tornado.testing.get_unused_port(): Returns a port selected in the same\n  way as inAsyncHTTPTestCase\n* AsyncHTTPTestCase.fetch(): Convenience method for synchronous fetches\n* IOLoop.set_blocking_signal_threshold(): Set a callback to be run when\n  the IOLoop is blocked.\n* IOStream.connect(): Asynchronously connect a client socket\n* AsyncHTTPClient.handle_callback_exception(): May be overridden\n  in subclass for custom error handling\n* httpclient.HTTPRequest has two new keyword arguments, validate_cert and\n  ca_certs. Setting validate_cert=False will disable all certificate checks\n  when fetching https urls.  ca_certs may be set to a filename containing\n  trusted certificate authorities (defaults will be used if this is\n  unspecified)\n* HTTPRequest.get_ssl_certificate(): Returns the client's SSL certificate\n  (if client certificates were requested in the server's ssl_options\n* StaticFileHandler can be configured to return a default file (e.g.\n  index.html) when a directory is requested\n* Template directives of the form \"{% from x import y %}\" are now supported (in\n  addition to the existing support for \"{% import x %}\"\n* FacebookGraphMixin.get_authenticated_user now accepts a new\n  parameter 'extra_fields' which may be used to request additional information\n  about the user\n\nBug fixes:\n* auth: Fixed KeyError with Facebook offline_access\n* auth: Uses request.uri instead of request.path as the default redirect\n  so that parameters are preserved.\n* escape: xhtml_escape() now returns a unicode string, not utf8-encoded bytes\n* ioloop: Callbacks added with add_callback are now run in the order they\n  were added\n* ioloop: PeriodicCallback.stop can now be called from inside the callback.\n* iostream: Fixed several bugs in SSLIOStream\n* iostream: Detect when the other side has closed the connection even with\n  the select()-based IOLoop\n* iostream: read_bytes(0) now works as expected\n* iostream: Fixed bug when writing large amounts of data on windows\n* iostream: Fixed infinite loop that could occur with unhandled exceptions\n* httpclient: Fix bugs when some requests use proxies and others don't\n* httpserver: HTTPRequest.protocol is now set correctly when using the\n  built-in SSL support\n* httpserver: When using multiple processes, the standard library's\n  random number generator is re-seeded in each child process\n* httpserver: With xheaders enabled, X-Forwarded-Proto is supported as an\n  alternative to X-Scheme\n* httpserver: Fixed bugs in multipart/form-data parsing\n* locale: format_date() now behaves sanely with dates in the future\n* locale: Updates to the language list\n* stack_context: Fixed bug with contexts leaking through reused IOStreams\n* stack_context: Simplified semantics and improved performance\n* web: The order of css_files from UIModules is now preserved\n* web: Fixed error with default_host redirect\n* web: StaticFileHandler works when os.path.sep != '/' (i.e. on Windows)\n* web: Fixed a caching-related bug in StaticFileHandler when a file's\n  timestamp has changed but its contents have not.\n* web: Fixed bugs with HEAD requests and e.g. Etag headers\n* web: Fix bugs when different handlers have different static_paths\n* web: @removeslash will no longer cause a redirect loop when applied to the\n  root path\n* websocket: Now works over SSL\n* websocket: Improved compatibility with proxies\n\nMany thanks to everyone who contributed patches, bug reports, and feedback\nthat went into this release!\n\n-Ben\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
