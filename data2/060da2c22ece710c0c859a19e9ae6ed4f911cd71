{
  "node_id": "MDM6VGFnMzAxNzQyOjA2MGRhMmMyMmVjZTcxMGMwYzg1OWExOWU5YWU2ZWQ0ZjkxMWNkNzE=",
  "sha": "060da2c22ece710c0c859a19e9ae6ed4f911cd71",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/060da2c22ece710c0c859a19e9ae6ed4f911cd71",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2017-04-16T23:46:46Z"
  },
  "object": {
    "sha": "c9d2a3fa573987629ad576e991c2f3b65f4daab4",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/c9d2a3fa573987629ad576e991c2f3b65f4daab4"
  },
  "tag": "v4.5.0",
  "message": "What's new in Tornado 4.5\n\nApr 16, 2017\n------------\n\nBackwards-compatibility warning\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- The `tornado.websocket` module now imposes a limit on the size of incoming\n  messages, which defaults to 10MiB.\n\nNew module\n~~~~~~~~~~\n\n- `tornado.routing` provides a more flexible routing system than the one built in\n  to `.Application`.\n\nGeneral changes\n~~~~~~~~~~~~~~~\n\n- Reduced the number of circular references, reducing memory usage and\n  improving performance.\n\n`tornado.auth`\n~~~~~~~~~~~~~~\n\n* The `tornado.auth` module has been updated for compatibility with `a\n  change to Facebook's access_token endpoint\n  <https://github.com/tornadoweb/tornado/pull/1977>`_. This includes both\n  the changes initially released in Tornado 4.4.3 and an additional change\n  to support the ```session_expires`` field in the new format.\n  The ``session_expires`` field is currently a string; it should be accessed\n  as ``int(user['session_expires'])`` because it will change from a string to\n  an int in Tornado 5.0.\n\n`tornado.autoreload`\n~~~~~~~~~~~~~~~~~~~~\n\n- Autoreload is now compatible with the `asyncio` event loop.\n- Autoreload no longer attempts to close the `.IOLoop` and all registered\n  file descriptors before restarting; it relies on the ``CLOEXEC`` flag\n  being set instead.\n\n`tornado.concurrent`\n~~~~~~~~~~~~~~~~~~~~\n\n- Suppressed some \"'NoneType' object not callback\" messages that could\n  be logged at shutdown.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n- ``yield None`` is now equivalent to ``yield gen.moment``.\n  `~tornado.gen.moment` is deprecated. This improves compatibility with\n  `asyncio`.\n- Fixed an issue in which a generator object could be garbage\n  collected prematurely (most often when weak references are used.\n- New function `.is_coroutine_function` identifies functions wrapped\n  by `.coroutine` or `.engine`.\n\n``tornado.http1connection``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- The ``Transfer-Encoding`` header is now parsed case-insensitively.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n- ``SimpleAsyncHTTPClient`` now follows 308 redirects.\n- ``CurlAsyncHTTPClient`` will no longer accept protocols other than\n  ``http`` and ``https``. To override this, set ``pycurl.PROTOCOLS``\n  and ``pycurl.REDIR_PROTOCOLS`` in a ``prepare_curl_callback``.\n- ``CurlAsyncHTTPClient`` now supports digest authentication for proxies\n  (in addition to basic auth) via the new ``proxy_auth_mode`` argument.\n- The minimum supported version of ``libcurl`` is now ``7.22.0``.\n\n`tornado.httpserver`\n~~~~~~~~~~~~~~~~~~~~\n\n- `.HTTPServer` now accepts the keyword argument\n  ``trusted_downstream`` which controls the parsing of\n  ``X-Forwarded-For`` headers. This header may be a list or set of IP\n  addresses of trusted proxies which will be skipped in the\n  ``X-Forwarded-For`` list.\n- The ``no_keep_alive`` argument works again.\n\n`tornado.httputil`\n~~~~~~~~~~~~~~~~~~\n\n- `.url_concat` correctly handles fragments and existing query arguments.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n- Fixed 100% CPU usage after a callback returns an empty list or dict.\n- `.IOLoop.add_callback` now uses a lockless implementation which\n  makes it safe for use from ``__del__`` methods. This improves\n  performance of calls to `~.IOLoop.add_callback` from the `.IOLoop`\n  thread, and slightly decreases it for calls from other threads.\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n- `memoryview` objects are now permitted as arguments to `~.BaseIOStream.write`.\n- The internal memory buffers used by `.IOStream` now use `bytearray`\n  instead of a list of `bytes`, improving performance.\n- Futures returned by `~.BaseIOStream.write` are no longer orphaned if a second\n  call to ``write`` occurs before the previous one is finished.\n\n`tornado.log`\n~~~~~~~~~~~~~\n\n- Colored log output is now supported on Windows if the\n  `colorama <https://pypi.python.org/pypi/colorama>`_ library\n  is installed  and the application calls ``colorama.init()`` at\n  startup.\n- The signature of the `.LogFormatter` constructor has been changed to\n  make it compatible with `logging.config.dictConfig`.\n\n`tornado.netutil`\n~~~~~~~~~~~~~~~~~\n\n- Worked around an issue that caused \"LookupError: unknown encoding:\n  latin1\" errors on Solaris.\n\n`tornado.process`\n~~~~~~~~~~~~~~~~~\n\n- `.Subprocess` no longer causes \"subprocess still running\" warnings on Python 3.6.\n- Improved error handling in `.cpu_count`.\n\n`tornado.tcpclient`\n~~~~~~~~~~~~~~~~~~~\n\n- `.TCPClient` now supports a ``source_ip`` and ``source_port`` argument.\n- Improved error handling for environments where IPv6 support is incomplete.\n\n`tornado.tcpserver`\n~~~~~~~~~~~~~~~~~~~\n\n- `.TCPServer.handle_stream` implementations may now be native coroutines.\n- Stopping a `.TCPServer` twice no longer raises an exception.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n- `.RedirectHandler` now supports substituting parts of the matched\n  URL into the redirect location using `str.format` syntax.\n- New methods `.RequestHandler.render_linked_js`,\n  `.RequestHandler.render_embed_js`,\n  `.RequestHandler.render_linked_css`, and\n  `.RequestHandler.render_embed_css` can be overridden to customize\n  the output of `.UIModule`.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n- `.WebSocketHandler.on_message` implementations may now be\n  coroutines. New messages will not be processed until the previous\n  ``on_message`` coroutine has finished.\n- The ``websocket_ping_interval`` and ``websocket_ping_timeout``\n  application settings can now be used to enable a periodic ping of\n  the websocket connection, allowing dropped connections to be\n  detected and closed.\n- The new ``websocket_max_message_size`` setting defaults to 10MiB.\n  The connection will be closed if messages larger than this are received.\n- Headers set by `.RequestHandler.prepare` or\n  `.RequestHandler.set_default_headers` are now sent as a part of the\n  websocket handshake.\n- Return values from `.WebSocketHandler.get_compression_options` may now include\n  the keys ``compression_level`` and ``mem_level`` to set gzip parameters.\n  The default compression level is now 6 instead of 9.\n\nDemos\n~~~~~\n\n- A new file upload demo is available in the `file_upload\n  <https://github.com/tornadoweb/tornado/tree/master/demos/file_upload>`_\n  directory.\n- A new `.TCPClient` and `.TCPServer` demo is available in the\n  `tcpecho <https://github.com/tornadoweb/tornado/tree/master/demos/tcpecho>`_ directory.\n- Minor updates have been made to several existing demos, including\n  updates to more recent versions of jquery.\n\nCredits\n~~~~~~~\n\nThe following people contributed commits to this release:\n\n- A\\. Jesse Jiryu Davis\n- Aaron Opfer\n- Akihiro Yamazaki\n- Alexander\n- Andreas Røsdal\n- Andrew Rabert\n- Andrew Sumin\n- Antoine Pietri\n- Antoine Pitrou\n- Artur Stawiarski\n- Ben Darnell\n- Brian Mego\n- Dario\n- Doug Vargas\n- Eugene Dubovoy\n- Iver Jordal\n- JZQT\n- James Maier\n- Jeff Hunter\n- Leynos\n- Mark Henderson\n- Michael V. DePalatis\n- Min RK\n- Mircea Ulinic\n- Ping\n- Ping Yang\n- Riccardo Magliocchetti\n- Samuel Chen\n- Samuel Dion-Girardeau\n- Scott Meisburger\n- Shawn Ding\n- TaoBeier\n- Thomas Kluyver\n- Vadim Semenov\n- matee\n- mike820324\n- stiletto\n- zhimin\n- 依云\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
