{
  "node_id": "MDM6VGFnMzAxNzQyOmVhODRhOGM5MzJmNGE1MzcyMDAyY2U2ODQ4ZjI5ZDU4ZGVkMWI2N2Q=",
  "sha": "ea84a8c932f4a5372002ce6848f29d58ded1b67d",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/ea84a8c932f4a5372002ce6848f29d58ded1b67d",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2012-09-04T05:09:50Z"
  },
  "object": {
    "sha": "648bebf0eeb220ebfaa8200bab3bac41add9d650",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/648bebf0eeb220ebfaa8200bab3bac41add9d650"
  },
  "tag": "v2.4.0",
  "message": "What's new in Tornado 2.4\n=========================\n\nSep 4, 2012\n-----------\n\nGeneral\n~~~~~~~\n\n* Fixed Python 3 bugs in `tornado.auth`, `tornado.locale`, and `tornado.wsgi`.\n\nHTTP clients\n~~~~~~~~~~~~\n\n* Removed ``max_simultaneous_connections`` argument from `tornado.httpclient`\n  (both implementations).  This argument hasn't been useful for some time\n  (if you were using it you probably want ``max_clients`` instead)\n* `tornado.simple_httpclient` now accepts and ignores HTTP 1xx status\n  responses.\n\n`tornado.ioloop` and `tornado.iostream`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Fixed a bug introduced in 2.3 that would cause `IOStream` close callbacks\n  to not run if there were pending reads.\n* Improved error handling in `SSLIOStream` and SSL-enabled `TCPServer`.\n* `SSLIOStream.get_ssl_certificate` now has a ``binary_form`` argument\n  which is passed to ``SSLSocket.getpeercert``.\n* `SSLIOStream.write` can now be called while the connection is in progress,\n  same as non-SSL `IOStream` (but be careful not to send sensitive data until\n  the connection has completed and the certificate has been verified).\n* `IOLoop.add_handler` cannot be called more than once with the same file\n  descriptor.  This was always true for ``epoll``, but now the other\n  implementations enforce it too.\n* On Windows, `TCPServer` uses `SO_EXCLUSIVEADDRUSER` instead of `SO_REUSEADDR`.\n\n`tornado.template`\n~~~~~~~~~~~~~~~~~~\n\n* ``{% break %}`` and ``{% continue %}`` can now be used looping constructs\n  in templates.\n* It is no longer an error for an if/else/for/etc block in a template to\n  have an empty body.\n\n`tornado.testing`\n~~~~~~~~~~~~~~~~~\n\n* New class `tornado.testing.AsyncHTTPSTestCase` is like `AsyncHTTPTestCase`.\n  but enables SSL for the testing server (by default using a self-signed\n  testing certificate).\n* `tornado.testing.main` now accepts additional keyword arguments and forwards\n  them to `unittest.main`.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n* New method `RequestHandler.get_template_namespace` can be overridden to\n  add additional variables without modifying keyword arguments to\n  `render_string`.\n* `RequestHandler.add_header` now works with `WSGIApplication`.\n* `RequestHandler.get_secure_cookie` now handles a potential error case.\n* `RequestHandler.__init__` now calls ``super().__init__`` to ensure that\n  all constructors are called when multiple inheritance is used.\n* Docs have been updated with a description of all available\n  :py:attr:`Application settings <tornado.web.Application.settings>`\n\nOther modules\n~~~~~~~~~~~~~\n\n* `OAuthMixin` now accepts ``\"oob\"`` as a ``callback_uri``.\n* `OpenIDMixin` now also returns the ``claimed_id`` field for the user.\n* `tornado.platform.twisted` shutdown sequence is now more compatible.\n* The logging configuration used in `tornado.options` is now more tolerant\n  of non-ascii byte strings.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
