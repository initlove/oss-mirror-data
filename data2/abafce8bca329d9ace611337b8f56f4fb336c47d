{
  "node_id": "MDM6VGFnMzAxNzQyOmFiYWZjZThiY2EzMjlkOWFjZTYxMTMzN2I4ZjU2ZjRmYjMzNmM0N2Q=",
  "sha": "abafce8bca329d9ace611337b8f56f4fb336c47d",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/abafce8bca329d9ace611337b8f56f4fb336c47d",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2015-05-27T01:47:35Z"
  },
  "object": {
    "sha": "fdfaf3dffa49479c7461050eacca07bc5ee8d207",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/fdfaf3dffa49479c7461050eacca07bc5ee8d207"
  },
  "tag": "v4.2.0",
  "message": "What's new in Tornado 4.2\n=========================\n\nMay 26, 2015\n------------\n\nBackwards-compatibility notes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``SSLIOStream.connect`` and `.IOStream.start_tls` now validate certificates\n  by default.\n* Certificate validation will now use the system CA root certificates instead\n  of ``certifi`` when possible (i.e. Python 2.7.9+ or 3.4+). This includes\n  `.IOStream` and ``simple_httpclient``, but not ``curl_httpclient``.\n* The default SSL configuration has become stricter, using\n  `ssl.create_default_context` where available on the client side.\n  (On the server side, applications are encouraged to migrate from the\n  ``ssl_options`` dict-based API to pass an `ssl.SSLContext` instead).\n* The deprecated classes in the `tornado.auth` module, ``GoogleMixin``,\n  ``FacebookMixin``, and ``FriendFeedMixin`` have been removed.\n\nNew modules: `tornado.locks` and `tornado.queues`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThese modules provide classes for coordinating coroutines, merged from\n`Toro <http://toro.readthedocs.org>`_.\n\nTo port your code from Toro's queues to Tornado 4.2, import `.Queue`,\n`.PriorityQueue`, or `.LifoQueue` from `tornado.queues` instead of from\n``toro``.\n\nUse `.Queue` instead of Toro's ``JoinableQueue``. In Tornado the methods\n`~.Queue.join` and `~.Queue.task_done` are available on all queues, not on a\nspecial ``JoinableQueue``.\n\nTornado queues raise exceptions specific to Tornado instead of reusing\nexceptions from the Python standard library.\nTherefore instead of catching the standard `queue.Empty` exception from\n`.Queue.get_nowait`, catch the special `tornado.queues.QueueEmpty` exception,\nand instead of catching the standard `queue.Full` from `.Queue.get_nowait`,\ncatch `tornado.queues.QueueFull`.\n\nTo port from Toro's locks to Tornado 4.2, import `.Condition`, `.Event`,\n`.Semaphore`, `.BoundedSemaphore`, or `.Lock` from `tornado.locks`\ninstead of from ``toro``.\n\nToro's ``Semaphore.wait`` allowed a coroutine to wait for the semaphore to\nbe unlocked *without* acquiring it. This encouraged unorthodox patterns; in\nTornado, just use `~.Semaphore.acquire`.\n\nToro's ``Event.wait`` raised a ``Timeout`` exception after a timeout. In\nTornado, `.Event.wait` raises `tornado.gen.TimeoutError`.\n\nToro's ``Condition.wait`` also raised ``Timeout``, but in Tornado, the `.Future`\nreturned by `.Condition.wait` resolves to False after a timeout::\n\n    @gen.coroutine\n    def await_notification():\n        if not (yield condition.wait(timeout=timedelta(seconds=1))):\n            print('timed out')\n        else:\n            print('condition is true')\n\nIn lock and queue methods, wherever Toro accepted ``deadline`` as a keyword\nargument, Tornado names the argument ``timeout`` instead.\n\nToro's ``AsyncResult`` is not merged into Tornado, nor its exceptions\n``NotReady`` and ``AlreadySet``. Use a `.Future` instead. If you wrote code like\nthis::\n\n    from tornado import gen\n    import toro\n\n    result = toro.AsyncResult()\n\n    @gen.coroutine\n    def setter():\n        result.set(1)\n\n    @gen.coroutine\n    def getter():\n        value = yield result.get()\n        print(value)  # Prints \"1\".\n\nThen the Tornado equivalent is::\n\n    from tornado import gen\n    from tornado.concurrent import Future\n\n    result = Future()\n\n    @gen.coroutine\n    def setter():\n        result.set_result(1)\n\n    @gen.coroutine\n    def getter():\n        value = yield result\n        print(value)  # Prints \"1\".\n\n`tornado.autoreload`\n~~~~~~~~~~~~~~~~~~~~\n\n* Improved compatibility with Windows.\n* Fixed a bug in Python 3 if a module was imported during a reload check.\n\n`tornado.concurrent`\n~~~~~~~~~~~~~~~~~~~~\n\n* `.run_on_executor` now accepts arguments to control which attributes\n  it uses to find the `.IOLoop` and executor.\n\n`tornado.curl_httpclient`\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Fixed a bug that would cause the client to stop processing requests\n  if an exception occurred in certain places while there is a queue.\n\n`tornado.escape`\n~~~~~~~~~~~~~~~~\n\n* `.xhtml_escape` now supports numeric character references in hex\n  format (``&#x20;``)\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n* `.WaitIterator` no longer uses weak references, which fixes several\n  garbage-collection-related bugs.\n* `tornado.gen.Multi` and `tornado.gen.multi_future` (which are used when\n  yielding a list or dict in a coroutine) now log any exceptions after the\n  first if more than one `.Future` fails (previously they would be logged\n  when the `.Future` was garbage-collected, but this is more reliable).\n  Both have a new keyword argument ``quiet_exceptions`` to suppress\n  logging of certain exception types; to use this argument you must\n  call ``Multi`` or ``multi_future`` directly instead of simply yielding\n  a list.\n* `.multi_future` now works when given multiple copies of the same `.Future`.\n* On Python 3, catching an exception in a coroutine no longer leads to\n  leaks via ``Exception.__context__``.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n* The ``raise_error`` argument now works correctly with the synchronous\n  `.HTTPClient`.\n* The synchronous `.HTTPClient` no longer interferes with `.IOLoop.current()`.\n\n`tornado.httpserver`\n~~~~~~~~~~~~~~~~~~~~\n\n* `.HTTPServer` is now a subclass of `tornado.util.Configurable`.\n\n`tornado.httputil`\n~~~~~~~~~~~~~~~~~~\n\n* `.HTTPHeaders` can now be copied with `copy.copy` and `copy.deepcopy`.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n* The `.IOLoop` constructor now has a ``make_current`` keyword argument\n  to control whether the new `.IOLoop` becomes `.IOLoop.current()`.\n* Third-party implementations of `.IOLoop` should accept ``**kwargs``\n  in their `~.IOLoop.initialize` methods and pass them to the superclass\n  implementation.\n* `.PeriodicCallback` is now more efficient when the clock jumps forward\n  by a large amount.\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n* ``SSLIOStream.connect`` and `.IOStream.start_tls` now validate certificates\n  by default.\n* New method `.SSLIOStream.wait_for_handshake` allows server-side applications\n  to wait for the handshake to complete in order to verify client certificates\n  or use NPN/ALPN.\n* The `.Future` returned by ``SSLIOStream.connect`` now resolves after the\n  handshake is complete instead of as soon as the TCP connection is\n  established.\n* Reduced logging of SSL errors.\n* `.BaseIOStream.read_until_close` now works correctly when a\n  ``streaming_callback`` is given but ``callback`` is None (i.e. when\n  it returns a `.Future`)\n\n`tornado.locale`\n~~~~~~~~~~~~~~~~\n\n* New method `.GettextLocale.pgettext` allows additional context to be\n  supplied for gettext translations.\n\n`tornado.log`\n~~~~~~~~~~~~~\n\n* `.define_logging_options` now works correctly when given a non-default\n  ``options`` object.\n\n`tornado.process`\n~~~~~~~~~~~~~~~~~\n\n* New method `.Subprocess.wait_for_exit` is a coroutine-friendly\n  version of `.Subprocess.set_exit_callback`.\n\n`tornado.simple_httpclient`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Improved performance on Python 3 by reusing a single `ssl.SSLContext`.\n* New constructor argument ``max_body_size`` controls the maximum response\n  size the client is willing to accept. It may be bigger than\n  ``max_buffer_size`` if ``streaming_callback`` is used.\n\n`tornado.tcpserver`\n~~~~~~~~~~~~~~~~~~~\n\n* `.TCPServer.handle_stream` may be a coroutine (so that any exceptions\n  it raises will be logged).\n\n`tornado.util`\n~~~~~~~~~~~~~~\n\n* `.import_object` now supports unicode strings on Python 2.\n* `.Configurable.initialize` now supports positional arguments.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n* Key versioning support for cookie signing. ``cookie_secret`` application\n  setting can now contain a dict of valid keys with version as key. The\n  current signing key then must be specified via ``key_version`` setting.\n* Parsing of the ``If-None-Match`` header now follows the RFC and supports\n  weak validators.\n* Passing ``secure=False`` or ``httponly=False`` to\n  `.RequestHandler.set_cookie` now works as expected (previously only the\n  presence of the argument was considered and its value was ignored).\n* `.RequestHandler.get_arguments` now requires that its ``strip`` argument\n  be of type bool. This helps prevent errors caused by the slightly dissimilar\n  interfaces between the singular and plural methods.\n* Errors raised in ``_handle_request_exception`` are now logged more reliably.\n* `.RequestHandler.redirect` now works correctly when called from a handler\n  whose path begins with two slashes.\n* Passing messages containing ``%`` characters to `tornado.web.HTTPError`\n  no longer causes broken error messages.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n* The ``on_close`` method will no longer be called more than once.\n* When the other side closes a connection, we now echo the received close\n  code back instead of sending an empty close frame.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
