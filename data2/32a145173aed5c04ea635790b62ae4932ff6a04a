{
  "node_id": "MDM6VGFnMzAxNzQyOjMyYTE0NTE3M2FlZDVjMDRlYTYzNTc5MGI2MmFlNDkzMmZmNmEwNGE=",
  "sha": "32a145173aed5c04ea635790b62ae4932ff6a04a",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/32a145173aed5c04ea635790b62ae4932ff6a04a",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2014-01-14T13:42:20Z"
  },
  "object": {
    "sha": "76a6987a20b9b7b72d20cc479b8ad971a45095fd",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/76a6987a20b9b7b72d20cc479b8ad971a45095fd"
  },
  "tag": "v3.2.0",
  "message": "What's new in Tornado 3.2\n=========================\n\nJan 14, 2014\n------------\n\nInstallation\n~~~~~~~~~~~~\n* Tornado now depends on the `backports.ssl_match_hostname\n  <https://pypi.python.org/pypi/backports.ssl_match_hostname>`_ when\n  running on Python 2.  This will be installed automatically when using ``pip``\n  or ``easy_install``\n* Tornado now includes an optional C extension module, which greatly improves\n  performance of websockets.  This extension will be built automatically\n  if a C compiler is found at install time.\n\nNew modules\n~~~~~~~~~~~\n\n* The `tornado.platform.asyncio` module provides integration with the\n  ``asyncio`` module introduced in Python 3.4 (also available for Python\n  3.3 with ``pip install asyncio``).\n\n`tornado.auth`\n~~~~~~~~~~~~~~\n\n* Added `.GoogleOAuth2Mixin` support authentication to Google services\n  with OAuth 2 instead of OpenID and OAuth 1.\n* `.FacebookGraphMixin` has been updated to use the current Facebook login\n  URL, which saves a redirect.\n\n`tornado.concurrent`\n~~~~~~~~~~~~~~~~~~~~\n\n* `.TracebackFuture` now accepts a ``timeout`` keyword argument (although\n  it is still incorrect to use a non-zero timeout in non-blocking code).\n\n``tornado.curl_httpclient``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``tornado.curl_httpclient`` now works on Python 3 with the\n  soon-to-be-released pycurl 7.19.3, which will officially support\n  Python 3 for the first time.  Note that there are some unofficial\n  Python 3 ports of pycurl (Ubuntu has included one for its past\n  several releases); these are not supported for use with Tornado.\n\n`tornado.escape`\n~~~~~~~~~~~~~~~~\n\n* `.xhtml_escape` now escapes apostrophes as well.\n* `tornado.escape.utf8`, `.to_unicode`, and `.native_str` now raise\n  `TypeError` instead of `AssertionError` when given an invalid value.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n* Coroutines may now yield dicts in addition to lists to wait for\n  multiple tasks in parallel.\n* Improved performance of `tornado.gen` when yielding a `.Future` that is\n  already done.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n* `tornado.httpclient.HTTPRequest` now uses property setters so that\n  setting attributes after construction applies the same conversions\n  as ``__init__`` (e.g. converting the body attribute to bytes).\n\n`tornado.httpserver`\n~~~~~~~~~~~~~~~~~~~~\n\n* Malformed ``x-www-form-urlencoded`` request bodies will now log a warning\n  and continue instead of causing the request to fail (similar to the existing\n  handling of malformed ``multipart/form-data`` bodies.  This is done mainly\n  because some libraries send this content type by default even when the data\n  is not form-encoded.\n* Fix some error messages for unix sockets (and other non-IP sockets)\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n* `.IOLoop` now uses `~.IOLoop.handle_callback_exception` consistently for\n  error logging.\n* `.IOLoop` now frees callback objects earlier, reducing memory usage\n  while idle.\n* `.IOLoop` will no longer call `logging.basicConfig` if there is a handler\n  defined for the root logger or for the ``tornado`` or ``tornado.application``\n  loggers (previously it only looked at the root logger).\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n* `.IOStream` now recognizes ``ECONNABORTED`` error codes in more places\n  (which was mainly an issue on Windows).\n* `.IOStream` now frees memory earlier if a connection is closed while\n  there is data in the write buffer.\n* `.PipeIOStream` now handles ``EAGAIN`` error codes correctly.\n* `.SSLIOStream` now initiates the SSL handshake automatically without\n  waiting for the application to try and read or write to the connection.\n* Swallow a spurious exception from ``set_nodelay`` when a connection\n  has been reset.\n\n`tornado.locale`\n~~~~~~~~~~~~~~~~\n\n* `.Locale.format_date` no longer forces the use of absolute\n  dates in Russian.\n\n`tornado.log`\n~~~~~~~~~~~~~\n\n* Fix an error from `tornado.log.enable_pretty_logging` when\n  `sys.stderr` does not have an ``isatty`` method.\n* `tornado.log.LogFormatter` now accepts keyword arguments ``fmt``\n  and ``datefmt``.\n\n`tornado.netutil`\n~~~~~~~~~~~~~~~~~\n\n* `.is_valid_ip` (and therefore ``HTTPRequest.remote_ip``) now rejects\n  empty strings.\n* Synchronously using `.ThreadedResolver` at import time to resolve\n  a unicode hostname no longer deadlocks.\n\n`tornado.platform.twisted`\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* `.TwistedResolver` now has better error handling.\n\n`tornado.process`\n~~~~~~~~~~~~~~~~~\n\n* `.Subprocess` no longer leaks file descriptors if `subprocess.Popen` fails.\n\n``tornado.simple_httpclient``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``simple_httpclient`` now applies the ``connect_timeout`` to requests\n  that are queued and have not yet started.\n* On Python 2.6, ``simple_httpclient`` now uses TLSv1 instead of SSLv3.\n* ``simple_httpclient`` now enforces the connect timeout during DNS resolution.\n* The embedded ``ca-certificates.crt`` file has been updated with the current\n  Mozilla CA list.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n* `.StaticFileHandler` no longer fails if the client requests a ``Range`` that\n  is larger than the entire file (Facebook has a crawler that does this).\n* `.RequestHandler.on_connection_close` now works correctly on subsequent\n  requests of a keep-alive connection.\n* New application setting ``default_handler_class`` can be used to easily\n  set up custom 404 pages.\n* New application settings ``autoreload``, ``compiled_template_cache``,\n  ``static_hash_cache``, and ``serve_traceback`` can be used to control\n  individual aspects of debug mode.\n* New methods `.RequestHandler.get_query_argument` and\n  `.RequestHandler.get_body_argument` and new attributes\n  `.HTTPRequest.query_arguments` and `.HTTPRequest.body_arguments` allow access\n  to arguments without intermingling those from the query string with those\n  from the request body.\n* `.RequestHandler.decode_argument` and related methods now raise\n  an ``HTTPError(400)`` instead of `UnicodeDecodeError` when the\n  argument could not be decoded.\n* `.RequestHandler.clear_all_cookies` now accepts ``domain`` and ``path``\n  arguments, just like `~.RequestHandler.clear_cookie`.\n* It is now possible to specify handlers by name when using the `.URLSpec`\n  class.\n* `.Application` now accepts 4-tuples to specify the ``name`` parameter\n  (which previously required constructing a `.URLSpec` object instead of\n  a tuple).\n* Fixed an incorrect error message when handler methods return a value\n  other than None or a Future.\n* Exceptions will no longer be logged twice when using both ``@asynchronous``\n  and ``@gen.coroutine``\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n* `.WebSocketHandler.write_message` now raises `.WebSocketClosedError` instead\n  of `AttributeError` when the connection has been closed.\n* `.websocket_connect` now accepts preconstructed ``HTTPRequest`` objects.\n* Fix a bug with `.WebSocketHandler` when used with some proxies that\n  unconditionally modify the ``Connection`` header.\n* `.websocket_connect` now returns an error immediately for refused connections\n  instead of waiting for the timeout.\n* `.WebSocketClientConnection` now has a ``close`` method.\n\n`tornado.wsgi`\n~~~~~~~~~~~~~~\n\n* `.WSGIContainer` now calls the iterable's ``close()`` method even if\n  an error is raised, in compliance with the spec.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
