{
  "node_id": "MDM6VGFnMzAxNzQyOjRmN2ExNjM2ZDg1YjhmMmYxZGFiZmQ1MDdlZjE2Zjg0NmMzZmVlMDg=",
  "sha": "4f7a1636d85b8f2f1dabfd507ef16f846c3fee08",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/4f7a1636d85b8f2f1dabfd507ef16f846c3fee08",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2011-09-21T04:22:10Z"
  },
  "object": {
    "sha": "b419316cc72ec7c91239e6a8642088cda4cc3266",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/b419316cc72ec7c91239e6a8642088cda4cc3266"
  },
  "tag": "v2.1.0",
  "message": "What's new in Tornado 2.1\n=========================\n\nSep 20, 2011\n------------\n\nBackwards-incompatible changes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Support for secure cookies written by pre-1.0 releases of Tornado has\n  been removed.  The `RequestHandler.get_secure_cookie` method no longer\n  takes an ``include_name`` parameter.\n* The ``debug`` application setting now causes stack traces to be displayed\n  in the browser on uncaught exceptions.  Since this may leak sensitive\n  information, debug mode is not recommended for public-facing servers.\n\nSecurity fixes\n~~~~~~~~~~~~~~\n\n* Diginotar has been removed from the default CA certificates file used\n  by `SimpleAsyncHTTPClient`.\n\nNew modules\n~~~~~~~~~~~\n\n* `tornado.gen`:  A generator-based interface to simplify writing\n  asynchronous functions.\n* `tornado.netutil`:  Parts of `tornado.httpserver` have been extracted into\n  a new module for use with non-HTTP protocols.\n* `tornado.platform.twisted`:  A bridge between the Tornado IOLoop and the\n  Twisted Reactor, allowing code written for Twisted to be run on Tornado.\n* `tornado.process`:  Multi-process mode has been improved, and can now restart\n  crashed child processes.  A new entry point has been added at\n  `tornado.process.fork_processes`, although\n  `tornado.httpserver.HTTPServer.start` is still supported.\n\n``tornado.web``\n~~~~~~~~~~~~~~~\n\n* `tornado.web.RequestHandler.write_error` replaces ``get_error_html`` as the\n  preferred way to generate custom error pages (``get_error_html`` is still\n  supported, but deprecated)\n* In `tornado.web.Application`, handlers may be specified by\n  (fully-qualified) name instead of importing and passing the class object\n  itself.\n* It is now possible to use a custom subclass of ``StaticFileHandler``\n  with the ``static_handler_class`` application setting, and this subclass\n  can override the behavior of the ``static_url`` method.\n* `~tornado.web.StaticFileHandler` subclasses can now override\n  ``get_cache_time`` to customize cache control behavior.\n* `tornado.web.RequestHandler.get_secure_cookie` now has a ``max_age_days``\n  parameter to allow applications to override the default one-month expiration.\n* `~tornado.web.RequestHandler.set_cookie` now accepts a ``max_age`` keyword\n  argument to set the ``max-age`` cookie attribute (note underscore vs dash)\n* `tornado.web.RequestHandler.set_default_headers` may be overridden to set\n  headers in a way that does not get reset during error handling.\n* `RequestHandler.add_header` can now be used to set a header that can\n  appear multiple times in the response.\n* `RequestHandler.flush` can now take a callback for flow control.\n* The ``application/json`` content type can now be gzipped.\n* The cookie-signing functions are now accessible as static functions\n  `tornado.web.create_signed_value` and `tornado.web.decode_signed_value`.\n\n``tornado.httpserver``\n~~~~~~~~~~~~~~~~~~~~~~\n\n* To facilitate some advanced multi-process scenarios, ``HTTPServer``\n  has a new method ``add_sockets``, and socket-opening code is\n  available separately as `tornado.netutil.bind_sockets`.\n* The ``cookies`` property is now available on `tornado.httpserver.HTTPRequest`\n  (it is also available in its old location as a property of\n  `~tornado.web.RequestHandler`)\n* `tornado.httpserver.HTTPServer.bind` now takes a backlog argument with the\n  same meaning as ``socket.listen``.\n* `~tornado.httpserver.HTTPServer` can now be run on a unix socket as well\n  as TCP.\n* Fixed exception at startup when ``socket.AI_ADDRCONFIG`` is not available,\n  as on Windows XP\n\n``IOLoop`` and ``IOStream``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* `~tornado.iostream.IOStream` performance has been improved, especially for\n  small synchronous requests.\n* New methods `tornado.iostream.IOStream.read_until_close` and\n  `tornado.iostream.IOStream.read_until_regex`.\n* `IOStream.read_bytes` and `IOStream.read_until_close` now take a\n  ``streaming_callback`` argument to return data as it is received rather\n  than all at once.\n* `IOLoop.add_timeout` now accepts `datetime.timedelta` objects in addition\n  to absolute timestamps.\n* `~tornado.ioloop.PeriodicCallback` now sticks to the specified period\n  instead of creeping later due to accumulated errors.\n* `tornado.ioloop.IOLoop` and `tornado.httpclient.HTTPClient` now have\n  ``close()`` methods that should be used in applications that create\n  and destroy many of these objects.\n* `IOLoop.install` can now be used to use a custom subclass of IOLoop\n  as the singleton without monkey-patching.\n* `~tornado.iostream.IOStream` should now always call the close callback\n  instead of the connect callback on a connection error.\n* The `IOStream` close callback will no longer be called while there\n  are pending read callbacks that can be satisfied with buffered data.\n\n``tornado.simple_httpclient``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Now supports client SSL certificates with the ``client_key`` and\n  ``client_cert`` parameters to `tornado.httpclient.HTTPRequest`\n* Now takes a maximum buffer size, to allow reading files larger than 100MB\n* Now works with HTTP 1.0 servers that don't send a Content-Length header\n* The ``allow_nonstandard_methods`` flag on HTTP client requests now\n  permits methods other than ``POST`` and ``PUT`` to contain bodies.\n* Fixed file descriptor leaks and multiple callback invocations in\n  `SimpleAsyncHTTPClient`\n* No longer consumes extra connection resources when following redirects.\n* Now works with buggy web servers that separate headers with ``\\n`` instead\n  of ``\\r\\n\\r\\n``.\n* Now sets ``response.request_time`` correctly.\n* Connect timeouts now work correctly.\n\nOther modules\n~~~~~~~~~~~~~\n\n* `tornado.auth.OpenIDMixin` now uses the correct realm when the\n  callback URI is on a different domain.\n* `tornado.autoreload` has a new command-line interface which can be used\n  to wrap any script.  This replaces the ``--autoreload`` argument to\n  `tornado.testing.main` and is more robust against syntax errors.\n* `tornado.autoreload.watch` can be used to watch files other than\n  the sources of imported modules.\n* `tornado.database.Connection` has new variants of ``execute`` and\n  ``executemany`` that return the number of rows affected instead of\n  the last inserted row id.\n* `tornado.locale.load_translations` now accepts any properly-formatted\n  locale name, not just those in the predefined ``LOCALE_NAMES`` list.\n* `tornado.options.define` now takes a ``group`` parameter to group options\n  in ``--help`` output.\n* Template loaders now take a ``namespace`` constructor argument to add\n  entries to the template namespace.\n* `tornado.websocket` now supports the latest (\"hybi-10\") version of the\n  protocol (the old version, \"hixie-76\" is still supported; the correct\n  version is detected automatically).\n* `tornado.websocket` now works on Python 3\n\nBug fixes\n~~~~~~~~~\n\n* Windows support has been improved.  Windows is still not an officially\n  supported platform, but the test suite now passes and\n  `tornado.autoreload` works.\n* Uploading files whose names contain special characters will now work.\n* Cookie values containing special characters are now properly quoted\n  and unquoted.\n* Multi-line headers are now supported.\n* Repeated Content-Length headers (which may be added by certain proxies)\n  are now supported in `HTTPServer`.\n* Unicode string literals now work in template expressions.\n* The template ``{% module %}`` directive now works even if applications\n  use a template variable named ``modules``.\n* Requests with \"Expect: 100-continue\" now work on python 3\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
