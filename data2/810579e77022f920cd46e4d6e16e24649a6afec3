{
  "node_id": "MDM6VGFnMzAxNzQyOjgxMDU3OWU3NzAyMmY5MjBjZDQ2ZTRkNmUxNmUyNDY0OWE2YWZlYzM=",
  "sha": "810579e77022f920cd46e4d6e16e24649a6afec3",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/810579e77022f920cd46e4d6e16e24649a6afec3",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2013-06-15T18:16:04Z"
  },
  "object": {
    "sha": "2d7ce584ec49a2e2b0028a093182f84c756ad8e1",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/2d7ce584ec49a2e2b0028a093182f84c756ad8e1"
  },
  "tag": "v3.1.0",
  "message": "What's new in Tornado 3.1\n=========================\n\nJun 15, 2013\n------------\n\nMultiple modules\n~~~~~~~~~~~~~~~~\n\n* Many reference cycles have been broken up throughout the package,\n  allowing for more efficient garbage collection on CPython.\n* Silenced some log messages when connections are opened and immediately\n  closed (i.e. port scans), or other situations related to closed\n  connections.\n* Various small speedups: `.HTTPHeaders` case normalization, `.UIModule`\n  proxy objects, precompile some regexes.\n\n`tornado.auth`\n~~~~~~~~~~~~~~\n\n* `~tornado.auth.OAuthMixin` always sends ``oauth_version=1.0`` in its\n  request as required by the spec.\n* `~tornado.auth.FacebookGraphMixin` now uses ``self._FACEBOOK_BASE_URL``\n  in `~.FacebookGraphMixin.facebook_request` to allow the base url to be\n  overridden.\n* The ``authenticate_redirect`` and ``authorize_redirect`` methods in the\n  `tornado.auth` mixin classes all now return Futures.  These methods\n  are asynchronous in `.OAuthMixin` and derived classes, although they\n  do not take a callback.  The `.Future` these methods return must be\n  yielded if they are called from a function decorated with `.gen.coroutine`\n  (but not `.gen.engine`).\n* `.TwitterMixin` now uses ``/account/verify_credentials`` to get information\n  about the logged-in user, which is more robust against changing screen\n  names.\n* The ``demos`` directory (in the source distribution) has a new\n  ``twitter`` demo using `.TwitterMixin`.\n\n`tornado.escape`\n~~~~~~~~~~~~~~~~\n\n* `.url_escape` and `.url_unescape` have a new ``plus`` argument (defaulting\n  to True for consistency with the previous behavior) which specifies\n  whether they work like `urllib.parse.unquote` or `urllib.parse.unquote_plus`.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n* Fixed a potential memory leak with long chains of `tornado.gen` coroutines.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n* `tornado.httpclient.HTTPRequest` takes a new argument ``auth_mode``,\n  which can be either ``basic`` or ``digest``.  Digest authentication\n  is only supported with ``tornado.curl_httpclient``.\n* ``tornado.curl_httpclient`` no longer goes into an infinite loop when\n  pycurl returns a negative timeout.\n* ``curl_httpclient`` now supports the ``PATCH`` and ``OPTIONS`` methods\n  without the use of ``allow_nonstandard_methods=True``.\n* Worked around a class of bugs in libcurl that would result in\n  errors from `.IOLoop.update_handler` in various scenarios including\n  digest authentication and socks proxies.\n* The ``TCP_NODELAY`` flag is now set when appropriate in ``simple_httpclient``.\n* ``simple_httpclient`` no longer logs exceptions, since those exceptions\n  are made available to the caller as ``HTTPResponse.error``.\n\n`tornado.httpserver`\n~~~~~~~~~~~~~~~~~~~~\n\n* `tornado.httpserver.HTTPServer` handles malformed HTTP headers more\n  gracefully.\n* `.HTTPServer` now supports lists of IPs in ``X-Forwarded-For``\n  (it chooses the last, i.e. nearest one).\n* Memory is now reclaimed promptly on CPython when an HTTP request\n  fails because it exceeded the maximum upload size.\n* The ``TCP_NODELAY`` flag is now set when appropriate in `.HTTPServer`.\n* The `.HTTPServer` ``no_keep_alive`` option is now respected with\n  HTTP 1.0 connections that explicitly pass ``Connection: keep-alive``.\n* The ``Connection: keep-alive`` check for HTTP 1.0 connections is now\n  case-insensitive.\n* The `str` and `repr` of `tornado.httpserver.HTTPRequest` no longer\n  include the request body, reducing log spam on errors (and potential\n  exposure/retention of private data).\n\n`tornado.httputil`\n~~~~~~~~~~~~~~~~~~\n\n* The cache used in `.HTTPHeaders` will no longer grow without bound.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n* Some `.IOLoop` implementations (such as ``pyzmq``) accept objects\n  other than integer file descriptors; these objects will now have\n  their ``.close()`` method called when the ``IOLoop` is closed with\n  ``all_fds=True``.\n* The stub handles left behind by `.IOLoop.remove_timeout` will now get\n  cleaned up instead of waiting to expire.\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n* Fixed a bug in `.BaseIOStream.read_until_close` that would sometimes\n  cause data to be passed to the final callback instead of the streaming\n  callback.\n* The `.IOStream` close callback is now run more reliably if there is\n  an exception in ``_try_inline_read``.\n* New method `.BaseIOStream.set_nodelay` can be used to set the\n  ``TCP_NODELAY`` flag.\n* Fixed a case where errors in ``SSLIOStream.connect`` (and\n  ``SimpleAsyncHTTPClient``) were not being reported correctly.\n\n`tornado.locale`\n~~~~~~~~~~~~~~~~\n\n* `.Locale.format_date` now works on Python 3.\n\n`tornado.netutil`\n~~~~~~~~~~~~~~~~~\n\n* The default `.Resolver` implementation now works on Solaris.\n* `.Resolver` now has a `~.Resolver.close` method.\n* Fixed a potential CPU DoS when ``tornado.netutil.ssl_match_hostname``\n  is used on certificates with an abusive wildcard pattern.\n* All instances of `.ThreadedResolver` now share a single thread pool,\n  whose size is set by the first one to be created (or the static\n  ``Resolver.configure`` method).\n* `.ExecutorResolver` is now documented for public use.\n* `.bind_sockets` now works in configurations with incomplete IPv6 support.\n\n`tornado.options`\n~~~~~~~~~~~~~~~~~\n\n* `tornado.options.define` with ``multiple=True`` now works on Python 3.\n* `tornado.options.options` and other `.OptionParser` instances support some\n  new dict-like methods: `~.OptionParser.items()`, iteration over keys,\n  and (read-only) access to options with square braket syntax.\n  `.OptionParser.group_dict` returns all options with a given group\n  name, and `.OptionParser.as_dict` returns all options.\n\n`tornado.process`\n~~~~~~~~~~~~~~~~~\n\n* `tornado.process.Subprocess` no longer leaks file descriptors into\n  the child process, which fixes a problem in which the child could not\n  detect that the parent process had closed its stdin pipe.\n* `.Subprocess.set_exit_callback` now works for subprocesses created\n  without an explicit ``io_loop`` parameter.\n\n`tornado.stack_context`\n~~~~~~~~~~~~~~~~~~~~~~~\n\n* `tornado.stack_context` has been rewritten and is now much faster.\n* New function `.run_with_stack_context` facilitates the use of stack\n  contexts with coroutines.\n\n`tornado.tcpserver`\n~~~~~~~~~~~~~~~~~~~\n\n* The constructors of `.TCPServer` and `.HTTPServer` now take a\n  ``max_buffer_size`` keyword argument.\n\n`tornado.template`\n~~~~~~~~~~~~~~~~~~\n\n* Some internal names used by the template system have been changed;\n  now all \"reserved\" names in templates start with ``_tt_``.\n\n`tornado.testing`\n~~~~~~~~~~~~~~~~~\n\n* `tornado.testing.AsyncTestCase.wait` now raises the correct exception\n  when it has been modified by `tornado.stack_context`.\n* `tornado.testing.gen_test` can now be called as ``@gen_test(timeout=60)``\n  to give some tests a longer timeout than others.\n* The environment variable ``ASYNC_TEST_TIMEOUT`` can now be set to\n  override the default timeout for `.AsyncTestCase.wait` and `.gen_test`.\n* `.bind_unused_port` now passes ``None`` instead of ``0`` as the port\n  to ``getaddrinfo``, which works better with some unusual network\n  configurations.\n\n`tornado.util`\n~~~~~~~~~~~~~~\n\n* `tornado.util.import_object` now works with top-level module names that\n  do not contain a dot.\n* `tornado.util.import_object` now consistently raises `ImportError`\n  instead of `AttributeError` when it fails.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n* The ``handlers`` list passed to the `tornado.web.Application` constructor\n  and `~tornado.web.Application.add_handlers` methods can now contain\n  lists in addition to tuples and `~tornado.web.URLSpec` objects.\n* `tornado.web.StaticFileHandler` now works on Windows when the client\n  passes an ``If-Modified-Since`` timestamp before 1970.\n* New method `.RequestHandler.log_exception` can be overridden to\n  customize the logging behavior when an exception is uncaught.  Most\n  apps that currently override ``_handle_request_exception`` can now\n  use a combination of `.RequestHandler.log_exception` and\n  `.write_error`.\n* `.RequestHandler.get_argument` now raises `.MissingArgumentError`\n  (a subclass of `tornado.web.HTTPError`, which is what it raised previously)\n  if the argument cannot be found.\n* `.Application.reverse_url` now uses `.url_escape` with ``plus=False``,\n  i.e. spaces are encoded as ``%20`` instead of ``+``.\n* Arguments extracted from the url path are now decoded with\n  `.url_unescape` with ``plus=False``, so plus signs are left as-is\n  instead of being turned into spaces.\n* `.RequestHandler.send_error` will now only be called once per request,\n  even if multiple exceptions are caught by the stack context.\n* The `tornado.web.asynchronous` decorator is no longer necessary for\n  methods that return a `.Future` (i.e. those that use the `.gen.coroutine`\n  or `.return_future` decorators)\n* `.RequestHandler.prepare` may now be asynchronous if it returns a\n  `.Future`.  The `~tornado.web.asynchronous` decorator is not used with\n  ``prepare``; one of the `.Future`-related decorators should be used instead.\n* ``RequestHandler.current_user`` may now be assigned to normally.\n* `.RequestHandler.redirect` no longer silently strips control characters\n  and whitespace.  It is now an error to pass control characters, newlines\n  or tabs.\n* `.StaticFileHandler` has been reorganized internally and now has additional\n  extension points that can be overridden in subclasses.\n* `.StaticFileHandler` now supports HTTP ``Range`` requests.\n  `.StaticFileHandler` is still not suitable for files too large to\n  comfortably fit in memory, but ``Range`` support is necessary in some\n  browsers to enable seeking of HTML5 audio and video.\n* `.StaticFileHandler` now uses longer hashes by default, and uses the same\n  hashes for ``Etag`` as it does for versioned urls.\n* `.StaticFileHandler.make_static_url` and `.RequestHandler.static_url`\n  now have an additional keyword argument ``include_version`` to suppress\n  the url versioning.\n* `.StaticFileHandler` now reads its file in chunks, which will reduce\n  memory fragmentation.\n* Fixed a problem with the ``Date`` header and cookie expiration dates\n  when the system locale is set to a non-english configuration.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n* `.WebSocketHandler` now catches `.StreamClosedError` and runs\n  `~.WebSocketHandler.on_close` immediately instead of logging a\n  stack trace.\n* New method `.WebSocketHandler.set_nodelay` can be used to set the\n  ``TCP_NODELAY`` flag.\n\n`tornado.wsgi`\n~~~~~~~~~~~~~~\n\n* Fixed an exception in `.WSGIContainer` when the connection is closed\n  while output is being written.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
