{
  "node_id": "MDM6VGFnMzAxNzQyOmQyY2M4ZGIwZTcwNTVhMWM1YTU1NDM2MTczNGE0MTI2MDUzNjgzZTQ=",
  "sha": "d2cc8db0e7055a1c5a554361734a4126053683e4",
  "url": "https://api.github.com/repos/tornadoweb/tornado/git/tags/d2cc8db0e7055a1c5a554361734a4126053683e4",
  "tagger": {
    "name": "Ben Darnell",
    "email": "ben@bendarnell.com",
    "date": "2014-07-15T12:43:16Z"
  },
  "object": {
    "sha": "f1824029db933d822f5b0d02583e4e6137f2bfd2",
    "type": "commit",
    "url": "https://api.github.com/repos/tornadoweb/tornado/git/commits/f1824029db933d822f5b0d02583e4e6137f2bfd2"
  },
  "tag": "v4.0.0",
  "message": "What's new in Tornado 4.0\n=========================\n\nJuly 15, 2014\n-------------\n\nHighlights\n~~~~~~~~~~\n\n* The `tornado.web.stream_request_body` decorator allows large files to be\n  uploaded with limited memory usage.\n* Coroutines are now faster and are used extensively throughout Tornado itself.\n  More methods now return `Futures <.Future>`, including most `.IOStream`\n  methods and `.RequestHandler.flush`.\n* Many user-overridden methods are now allowed to return a `.Future`\n  for flow control.\n* HTTP-related code is now shared between the `tornado.httpserver`,\n  ``tornado.simple_httpclient`` and `tornado.wsgi` modules, making support\n  for features such as chunked and gzip encoding more consistent.\n  `.HTTPServer` now uses new delegate interfaces defined in `tornado.httputil`\n  in addition to its old single-callback interface.\n* New module `tornado.tcpclient` creates TCP connections with non-blocking\n  DNS, SSL handshaking, and support for IPv6.\n\nBackwards-compatibility notes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* `tornado.concurrent.Future` is no longer thread-safe; use\n  `concurrent.futures.Future` when thread-safety is needed.\n* Tornado now depends on the `certifi <https://pypi.python.org/pypi/certifi>`_\n  package instead of bundling its own copy of the Mozilla CA list. This will\n  be installed automatically when using ``pip`` or ``easy_install``.\n* This version includes the changes to the secure cookie format first\n  introduced in version :doc:`3.2.1 <v3.2.1>`, and the xsrf token change\n  in version :doc:`3.2.2 <v3.2.2>`.  If you are upgrading from an earlier\n  version, see those versions' release notes.\n* WebSocket connections from other origin sites are now rejected by default.\n  To accept cross-origin websocket connections, override\n  the new method `.WebSocketHandler.check_origin`.\n* `.WebSocketHandler` no longer supports the old ``draft 76`` protocol\n  (this mainly affects Safari 5.x browsers).  Applications should use\n  non-websocket workarounds for these browsers.\n* Authors of alternative `.IOLoop` implementations should see the changes\n  to `.IOLoop.add_handler` in this release.\n* The ``RequestHandler.async_callback`` and ``WebSocketHandler.async_callback``\n  wrapper functions have been removed; they have been obsolete for a long\n  time due to stack contexts (and more recently coroutines).\n* ``curl_httpclient`` now requires a minimum of libcurl version 7.21.1 and\n  pycurl 7.18.2.\n* Support for ``RequestHandler.get_error_html`` has been removed;\n  override `.RequestHandler.write_error` instead.\n\nOther notes\n~~~~~~~~~~~\n\n* The git repository has moved to https://github.com/tornadoweb/tornado.\n  All old links should be redirected to the new location.\n* An `announcement mailing list\n  <http://groups.google.com/group/python-tornado-announce>`_ is now available.\n* All Tornado modules are now importable on Google App Engine (although\n  the App Engine environment does not allow the system calls used\n  by `.IOLoop` so many modules are still unusable).\n\n`tornado.auth`\n~~~~~~~~~~~~~~\n\n* Fixed a bug in `.FacebookMixin` on Python 3.\n* When using the `.Future` interface, exceptions are more reliably delivered\n  to the caller.\n\n`tornado.concurrent`\n~~~~~~~~~~~~~~~~~~~~\n\n* `tornado.concurrent.Future` is now always thread-unsafe (previously\n  it would be thread-safe if the `concurrent.futures` package was available).\n  This improves performance and provides more consistent semantics.\n  The parts of Tornado that accept Futures will accept both Tornado's\n  thread-unsafe Futures and the thread-safe `concurrent.futures.Future`.\n* `tornado.concurrent.Future` now includes all the functionality\n  of the old ``TracebackFuture`` class.  ``TracebackFuture`` is now\n  simply an alias for ``Future``.\n\n``tornado.curl_httpclient``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``curl_httpclient`` now passes along the HTTP \"reason\" string\n  in ``response.reason``.\n\n`tornado.gen`\n~~~~~~~~~~~~~\n\n* Performance of coroutines has been improved.\n* Coroutines no longer generate ``StackContexts`` by default, but they\n  will be created on demand when needed.\n* The internals of the `tornado.gen` module have been rewritten to\n  improve performance when using ``Futures``, at the expense of some\n  performance degradation for the older `.YieldPoint` interfaces.\n* New function `.with_timeout` wraps a `.Future` and raises an exception\n  if it doesn't complete in a given amount of time.\n* New object `.moment` can be yielded to allow the IOLoop to run for\n  one iteration before resuming.\n* `.Task` is now a function returning a `.Future` instead of a `.YieldPoint`\n  subclass.  This change should be transparent to application code, but\n  allows `.Task` to take advantage of the newly-optimized `.Future`\n  handling.\n\n`tornado.http1connection`\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* New module contains the HTTP implementation shared by `tornado.httpserver`\n  and ``tornado.simple_httpclient``.\n\n`tornado.httpclient`\n~~~~~~~~~~~~~~~~~~~~\n\n* The command-line HTTP client (``python -m tornado.httpclient $URL``)\n  now works on Python 3.\n* Fixed a memory leak in `.AsyncHTTPClient` shutdown that affected\n  applications that created many HTTP clients and IOLoops.\n* New client request parameter ``decompress_response`` replaces\n  the existing ``use_gzip`` parameter; both names are accepted.\n\n`tornado.httpserver`\n~~~~~~~~~~~~~~~~~~~~\n\n* ``tornado.httpserver.HTTPRequest`` has moved to\n  `tornado.httputil.HTTPServerRequest`.\n* HTTP implementation has been unified with ``tornado.simple_httpclient``\n  in `tornado.http1connection`.\n* Now supports ``Transfer-Encoding: chunked`` for request bodies.\n* Now supports ``Content-Encoding: gzip`` for request bodies if\n  ``decompress_request=True`` is passed to the `.HTTPServer` constructor.\n* The ``connection`` attribute of `.HTTPServerRequest` is now documented\n  for public use; applications are expected to write their responses\n  via the `.HTTPConnection` interface.\n* The `.HTTPServerRequest.write` and `.HTTPServerRequest.finish` methods\n  are now deprecated.  (`.RequestHandler.write` and `.RequestHandler.finish`\n  are *not* deprecated; this only applies to the methods on\n  `.HTTPServerRequest`)\n* `.HTTPServer` now supports `.HTTPServerConnectionDelegate` in addition to\n  the old ``request_callback`` interface.  The delegate interface supports\n  streaming of request bodies.\n* `.HTTPServer` now detects the error of an application sending a\n  ``Content-Length`` error that is inconsistent with the actual content.\n* New constructor arguments ``max_header_size`` and ``max_body_size``\n  allow separate limits to be set for different parts of the request.\n  ``max_body_size`` is applied even in streaming mode.\n* New constructor argument ``chunk_size`` can be used to limit the amount\n  of data read into memory at one time per request.\n* New constructor arguments ``idle_connection_timeout`` and ``body_timeout``\n  allow time limits to be placed on the reading of requests.\n* Form-encoded message bodies are now parsed for all HTTP methods, not just\n  ``POST``, ``PUT``, and ``PATCH``.\n\n`tornado.httputil`\n~~~~~~~~~~~~~~~~~~\n\n* `.HTTPServerRequest` was moved to this module from `tornado.httpserver`.\n* New base classes `.HTTPConnection`, `.HTTPServerConnectionDelegate`,\n  and `.HTTPMessageDelegate` define the interaction between applications\n  and the HTTP implementation.\n\n`tornado.ioloop`\n~~~~~~~~~~~~~~~~\n\n* `.IOLoop.add_handler` and related methods now accept file-like objects\n  in addition to raw file descriptors.  Passing the objects is recommended\n  (when possible) to avoid a garbage-collection-related problem in unit tests.\n* New method `.IOLoop.clear_instance` makes it possible to uninstall the\n  singleton instance.\n* Timeout scheduling is now more robust against slow callbacks.\n* `.IOLoop.add_timeout` is now a bit more efficient.\n* When a function run by the `.IOLoop` returns a `.Future` and that `.Future`\n  has an exception, the `.IOLoop` will log the exception.\n* New method `.IOLoop.spawn_callback` simplifies the process of launching\n  a fire-and-forget callback that is separated from the caller's stack context.\n* New methods `.IOLoop.call_later` and `.IOLoop.call_at` simplify the\n  specification of relative or absolute timeouts (as opposed to\n  `~.IOLoop.add_timeout`, which used the type of its argument).\n\n`tornado.iostream`\n~~~~~~~~~~~~~~~~~~\n\n* The ``callback`` argument to most `.IOStream` methods is now optional.\n  When called without a callback the method will return a `.Future`\n  for use with coroutines.\n* New method `.IOStream.start_tls` converts an `.IOStream` to an\n  `.SSLIOStream`.\n* No longer gets confused when an ``IOError`` or ``OSError`` without\n  an ``errno`` attribute is raised.\n* `.BaseIOStream.read_bytes` now accepts a ``partial`` keyword argument,\n  which can be used to return before the full amount has been read.\n  This is a more coroutine-friendly alternative to ``streaming_callback``.\n* `.BaseIOStream.read_until` and ``read_until_regex`` now acept a\n  ``max_bytes`` keyword argument which will cause the request to fail if\n  it cannot be satisfied from the given number of bytes.\n* `.IOStream` no longer reads from the socket into memory if it does not\n  need data to satisfy a pending read.  As a side effect, the close callback\n  will not be run immediately if the other side closes the connection\n  while there is unconsumed data in the buffer.\n* The default ``chunk_size`` has been increased to 64KB (from 4KB)\n* The `.IOStream` constructor takes a new keyword argument\n  ``max_write_buffer_size`` (defaults to unlimited).  Calls to\n  `.BaseIOStream.write` will raise `.StreamBufferFullError` if the amount\n  of unsent buffered data exceeds this limit.\n* ``ETIMEDOUT`` errors are no longer logged.  If you need to distinguish\n  timeouts from other forms of closed connections, examine ``stream.error``\n  from a close callback.\n\n`tornado.netutil`\n~~~~~~~~~~~~~~~~~\n\n* When `.bind_sockets` chooses a port automatically, it will now use\n  the same port for IPv4 and IPv6.\n* TLS compression is now disabled by default on Python 3.3 and higher\n  (it is not possible to change this option in older versions).\n\n`tornado.options`\n~~~~~~~~~~~~~~~~~\n\n* It is now possible to disable the default logging configuration\n  by setting ``options.logging`` to ``None`` instead of the string ``\"none\"``.\n\n`tornado.platform.asyncio`\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Now works on Python 2.6.\n* Now works with Trollius version 0.3.\n\n`tornado.platform.twisted`\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* `.TwistedIOLoop` now works on Python 3.3+ (with Twisted 14.0.0+).\n\n``tornado.simple_httpclient``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``simple_httpclient`` has better support for IPv6, which is now enabled\n  by default.\n* Improved default cipher suite selection (Python 2.7+).\n* HTTP implementation has been unified with ``tornado.httpserver``\n  in `tornado.http1connection`\n* Streaming request bodies are now supported via the ``body_producer``\n  keyword argument to `tornado.httpclient.HTTPRequest`.\n* The ``expect_100_continue`` keyword argument to\n  `tornado.httpclient.HTTPRequest` allows the use of the HTTP ``Expect:\n  100-continue`` feature.\n* ``simple_httpclient`` now raises the original exception (e.g. an `IOError`)\n  in more cases, instead of converting everything to ``HTTPError``.\n\n`tornado.stack_context`\n~~~~~~~~~~~~~~~~~~~~~~~\n\n* The stack context system now has less performance overhead when no\n  stack contexts are active.\n\n`tornado.tcpclient`\n~~~~~~~~~~~~~~~~~~~\n\n* New module which creates TCP connections and IOStreams, including\n  name resolution, connecting, and SSL handshakes.\n\n`tornado.testing`\n~~~~~~~~~~~~~~~~~\n\n* `.AsyncTestCase` now attempts to detect test methods that are generators\n  but were not run with ``@gen_test`` or any similar decorator (this would\n  previously result in the test silently being skipped).\n* Better stack traces are now displayed when a test times out.\n* The ``@gen_test`` decorator now passes along ``*args, **kwargs`` so it\n  can be used on functions with arguments.\n* Fixed the test suite when ``unittest2`` is installed on Python 3.\n\n`tornado.web`\n~~~~~~~~~~~~~\n\n* It is now possible to support streaming request bodies with the\n  `.stream_request_body` decorator and the new `.RequestHandler.data_received`\n  method.\n* `.RequestHandler.flush` now returns a `.Future` if no callback is given.\n* New exception `.Finish` may be raised to finish a request without\n  triggering error handling.\n* When gzip support is enabled, all ``text/*`` mime types will be compressed,\n  not just those on a whitelist.\n* `.Application` now implements the `.HTTPMessageDelegate` interface.\n* ``HEAD`` requests in `.StaticFileHandler` no longer read the entire file.\n* `.StaticFileHandler` now streams response bodies to the client.\n* New setting ``compress_response`` replaces the existing ``gzip``\n  setting; both names are accepted.\n* XSRF cookies that were not generated by this module (i.e. strings without\n  any particular formatting) are once again accepted (as long as the\n  cookie and body/header match).  This pattern was common for\n  testing and non-browser clients but was broken by the changes in\n  Tornado 3.2.2.\n\n`tornado.websocket`\n~~~~~~~~~~~~~~~~~~~\n\n* WebSocket connections from other origin sites are now rejected by default.\n  Browsers do not use the same-origin policy for WebSocket connections as they\n  do for most other browser-initiated communications.  This can be surprising\n  and a security risk, so we disallow these connections on the server side\n  by default.  To accept cross-origin websocket connections, override\n  the new method `.WebSocketHandler.check_origin`.\n* `.WebSocketHandler.close` and `.WebSocketClientConnection.close` now\n  support ``code`` and ``reason`` arguments to send a status code and\n  message to the other side of the connection when closing.  Both classes\n  also have ``close_code`` and ``close_reason`` attributes to receive these\n  values when the other side closes.\n* The C speedup module now builds correctly with MSVC, and can support\n  messages larger than 2GB on 64-bit systems.\n* The fallback mechanism for detecting a missing C compiler now\n  works correctly on Mac OS X.\n* Arguments to `.WebSocketHandler.open` are now decoded in the same way\n  as arguments to `.RequestHandler.get` and similar methods.\n* It is now allowed to override ``prepare`` in a `.WebSocketHandler`,\n  and this method may generate HTTP responses (error pages) in the usual\n  way.  The HTTP response methods are still not allowed once the\n  WebSocket handshake has completed.\n\n`tornado.wsgi`\n~~~~~~~~~~~~~~\n\n* New class `.WSGIAdapter` supports running a Tornado `.Application` on\n  a WSGI server in a way that is more compatible with Tornado's non-WSGI\n  `.HTTPServer`.  `.WSGIApplication` is deprecated in favor of using\n  `.WSGIAdapter` with a regular `.Application`.\n* `.WSGIAdapter` now supports gzipped output.\n",
  "verification": {
    "verified": false,
    "reason": "unsigned",
    "signature": null,
    "payload": null
  }
}
